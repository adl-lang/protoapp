module common.http {

/// Request types

struct HttpGet<O> {
  String path;
  HttpSecurity security;
  Nullable<HttpRateLimit> rateLimit = null;
  TypeToken<O> respType = null;
};

struct HttpPut<I,O> {
  String path;
  HttpSecurity security;
  Nullable<HttpRateLimit> rateLimit = null;
  TypeToken<I> reqType = null;
  TypeToken<O> respType = null;
};

struct HttpPost<I,O> {
  String path;
  HttpSecurity security;
  Nullable<HttpRateLimit> rateLimit = null;
  TypeToken<I> reqType = null;
  TypeToken<O> respType = null;
};

struct HttpDelete<P,O> {
  String path;
  HttpSecurity security;
  TypeToken<P> paramsType = null;
  TypeToken<O> respType = null;
};

union HttpSecurity {
  // The endpoint is publically accessible
  Void public;

  // A token is required to access the endpoint
  Void token;

  // A token containing the specified role is required
  // for access
  String tokenWithRole;
};


struct HttpRateLimit {
  Word32 maxRequests;
  RateLimitTimeUnit perTimeUnit;
};

union RateLimitTimeUnit {
  Void second;
  Void minute;
  Void hour;
};

/// Empty Struct (Used mostly for Void RPC responses)
struct Unit {};

};

