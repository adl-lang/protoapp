module protoapp.apis.types {

import common.http.Unit;
import common.http.HttpPost;
import common.http.HttpGet;
import common.time.Instant;
import common.strings.EmailAddress;
import common.strings.Password;
import common.strings.StringNE;
import common.strings.StringML;
import common.capability.CapabilityToken;

import protoapp.db.AppUserId;
import protoapp.db.MessageId;

newtype AccessToken = StringNE;
newtype RefreshToken = StringNE;
newtype AdminAccessToken = StringNE;

type AccessTokenMarker = CapabilityToken<AccessToken>;
type RefreshTokenMarker = CapabilityToken<RefreshToken>;
type AdminAccessTokenMarker = CapabilityToken<AdminAccessToken>;

struct LoginReq {
  StringNE email;
  Password password;
};

union LoginResp {
  LoginTokens tokens;
  Void invalid_credentials;
};

union NewRefreshResp {
  @RefreshTokenMarker {}
  StringNE refresh_jwt;
  Void invalid_credentials;
};

struct RefreshReq {
  /// The refresh token is usually provided as a cookie, i.e. a null refresh_token in the post body.
  /// The refresh_token body is used for testing purposes.
  @RefreshTokenMarker {}
  Nullable<StringNE> refresh_token = null;
};

struct CapRefreshReq {
};

union RefreshResp {
  @AccessTokenMarker {}
  StringNE access_token;
  Void invalid_refresh_token;
};

struct LoginTokens {
  @AccessTokenMarker {}
  StringNE access_jwt;
  @RefreshTokenMarker {}
  StringNE refresh_jwt;
};

struct NewMessageReq {
  StringML message;
};

struct RecentMessagesReq {
  PageReq page;
};

struct PageReq {
  // Pagination offset
  Word64 offset = 0;

  // Max number of items to return
  Word64 limit = 20;
};

/// A holder for paginated results
struct Paginated<T> {
  /// The paginated items
  Vector<T> items;
  /// The offset used for this query
  Word64 current_offset;
  /// The size of the entire date set
  Word64 total_count;
};

struct Message {
  MessageId id;
  Instant posted_at;
  String user_fullname;
  StringML message;
};

struct QueryUsersReq {
  PageReq page = {};
};

struct User {
  StringNE fullname;
  EmailAddress email;
  Bool is_admin;
};

type UserWithId = WithId<AppUserId, User>;

struct UserDetails {
  StringNE fullname;
  EmailAddress email;
  Bool is_admin;
  Password password;
};

struct WithId<I,T> {
 I id;
 T value;
};

};
