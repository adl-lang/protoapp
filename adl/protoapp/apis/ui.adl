module protoapp.apis.ui {

import common.http.Unit;
import common.http.HttpPost;
import common.http.HttpGet;
import common.time.Instant;
import common.strings.EmailAddress;
import common.strings.Password;
import common.strings.StringNE;
import common.strings.StringML;

import protoapp.db.AppUserId;
import protoapp.db.MessageId;

import protoapp.apis.types.*;

struct ApiRequests {

  /// AWS default compatible health check
  HttpGet<Unit> healthy = {
    "path": "/",
    "security" : "public"
  };


  /// Test the server is live
  HttpPost<Unit, Unit> ping = {
    "path": "/ping",
    "security" : "public"
  };

  /// Login a user
  ///
  /// The response will set an httpOnly cookie containing the refresh token
  HttpPost<LoginReq, LoginResp> login = {
    "path": "/login",
    "security" : "public"
  };

  /// Get a refreshed access token
  ///
  /// If the refresh token is not provided in the request body, then it will
  /// be read from the refrestToken cookie in the request.
  HttpPost<RefreshReq, RefreshResp> refresh = {
    "path": "/refresh",
    "security" : "public"
  };

  /// Clear the `refreshToken` cookie.
  HttpPost<Unit, Unit> logout = {
    "path": "/logout",
    "security" : "public"
  };

  /// Post a message to the noticeboard
  HttpPost<NewMessageReq, MessageId> new_message = {
    "path": "/messages/new",
    "security" : "token"
  };
  /// Get recent noticeboard messages
  HttpPost<RecentMessagesReq, Paginated<Message> > recent_messages = {
    "path": "/messages/recent",
    "security" : "token"
  };

  MessageApi message_api = {};

  /// Gets info about the logged in user
  // NOTE: Fails with 401 if the token is invalid or user does not exist
  HttpGet<UserWithId> who_am_i = {
    "path": "/whoami",
    "security" : "token"
  };

  /// Create a new user
  HttpPost<UserDetails, AppUserId> create_user = {
    "path": "/users/create",
    "security" : { "tokenWithRole": "admin" }
  };

  /// Update a user
  HttpPost<WithId<AppUserId,UserDetails>, Unit> update_user = {
    "path": "/users/update",
    "security" : { "tokenWithRole": "admin" }
  };

  /// Query users
  HttpPost<QueryUsersReq, Paginated<UserWithId>> query_users = {
    "path": "/users/query",
    "security" : { "tokenWithRole": "admin" }
  };
};

struct MessageApi {
  /// Post a message to the noticeboard
  HttpPost<NewMessageReq, MessageId> new_message = {
    "path": "/messages/new",
    "security" : "token"
  };
  /// Get recent noticeboard messages
  HttpPost<RecentMessagesReq, Paginated<Message> > recent_messages = {
    "path": "/messages/recent",
    "security" : "token"
  };
};


};
