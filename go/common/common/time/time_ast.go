// Code generated by goadlc v3 - DO NOT EDIT.
package time

import (
	goadl "github.com/adl-lang/goadl_rt/v3"
	"github.com/adl-lang/goadl_rt/v3/customtypes"
	"github.com/adl-lang/goadl_rt/v3/sys/adlast"
	"github.com/adl-lang/goadl_rt/v3/sys/types"
	"time"
)

func Texpr_DayOfWeek() adlast.ATypeExpr[DayOfWeek] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("common.time", "DayOfWeek"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[DayOfWeek](te)
}

func AST_DayOfWeek() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"DayOfWeek",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"monday",
						"monday",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Void",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"tuesday",
						"tuesday",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Void",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"wednesday",
						"wednesday",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Void",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"thursday",
						"thursday",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Void",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"friday",
						"friday",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Void",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"saturday",
						"saturday",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Void",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"sunday",
						"sunday",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Void",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "The day of the week\n"},
	)
	return adlast.Make_ScopedDecl("common.time", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("common.time", "DayOfWeek"),
		AST_DayOfWeek(),
	)
}

func Texpr_Duration() adlast.ATypeExpr[Duration] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("common.time", "Duration"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[Duration](te)
}

func AST_Duration() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"Duration",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_newtype_(
			adlast.MakeAll_NewType(
				[]adlast.Ident{},
				adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_primitive(
						"String",
					),
					[]adlast.TypeExpr{},
				),
				types.Make_Maybe_just[any](
					"P1D",
				),
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "A duration in ISO8601 format\n"},
	)
	return adlast.Make_ScopedDecl("common.time", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("common.time", "Duration"),
		AST_Duration(),
	)
}

func Texpr_Instant() adlast.ATypeExpr[time.Time] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("common.time", "Instant"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[time.Time](te)
}

func AST_Instant() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"Instant",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_newtype_(
			adlast.MakeAll_NewType(
				[]adlast.Ident{},
				adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_primitive(
						"Int64",
					),
					[]adlast.TypeExpr{},
				),
				types.Make_Maybe_nothing[any](),
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("adlc.config.go_", "GoCustomType"): map[string]interface{}{"gotype": map[string]interface{}{"import_path": "time", "name": "Time", "pkg": "time", "type_constraints": []interface{}{}}, "helpers": map[string]interface{}{"name": "InstantHelpers", "ref": interface{}(nil)}}, adlast.Make_ScopedName("sys.annotations", "Doc"): "A instant in time, represented as milliseconds from\nthe epoch of \"1970-01-01T00:00:00Z\n"},
	)
	return adlast.Make_ScopedDecl("common.time", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("common.time", "Instant"),
		AST_Instant(),
	)
	goadl.RESOLVER.RegisterHelper(
		adlast.Make_ScopedName("common.time", "Instant"),
		(*InstantHelpers)(nil),
	)
}

func Texpr_LocalDate() adlast.ATypeExpr[time.Time] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("common.time", "LocalDate"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[time.Time](te)
}

func AST_LocalDate() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"LocalDate",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_newtype_(
			adlast.MakeAll_NewType(
				[]adlast.Ident{},
				adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_primitive(
						"String",
					),
					[]adlast.TypeExpr{},
				),
				types.Make_Maybe_just[any](
					"1970-01-01",
				),
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("adlc.config.go_", "GoCustomType"): map[string]interface{}{"gotype": map[string]interface{}{"import_path": "time", "name": "Time", "pkg": "time", "type_constraints": []interface{}{}}, "helpers": map[string]interface{}{"name": "LocalDateHelpers", "ref": interface{}(nil)}}, adlast.Make_ScopedName("sys.annotations", "Doc"): "A date in ISO8601 format\n"},
	)
	return adlast.Make_ScopedDecl("common.time", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("common.time", "LocalDate"),
		AST_LocalDate(),
	)
	goadl.RESOLVER.RegisterHelper(
		adlast.Make_ScopedName("common.time", "LocalDate"),
		(*LocalDateHelpers)(nil),
	)
}

func Texpr_LocalDateTime() adlast.ATypeExpr[time.Time] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("common.time", "LocalDateTime"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[time.Time](te)
}

func AST_LocalDateTime() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"LocalDateTime",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_newtype_(
			adlast.MakeAll_NewType(
				[]adlast.Ident{},
				adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_primitive(
						"String",
					),
					[]adlast.TypeExpr{},
				),
				types.Make_Maybe_just[any](
					"1970-01-01T00:00:00",
				),
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("adlc.config.go_", "GoCustomType"): map[string]interface{}{"gotype": map[string]interface{}{"import_path": "time", "name": "Time", "pkg": "time", "type_constraints": []interface{}{}}, "helpers": map[string]interface{}{"name": "LocalDateTimeHelpers", "ref": interface{}(nil)}}, adlast.Make_ScopedName("sys.annotations", "Doc"): "A datetime in ISO8601 format\n"},
	)
	return adlast.Make_ScopedDecl("common.time", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("common.time", "LocalDateTime"),
		AST_LocalDateTime(),
	)
	goadl.RESOLVER.RegisterHelper(
		adlast.Make_ScopedName("common.time", "LocalDateTime"),
		(*LocalDateTimeHelpers)(nil),
	)
}

func Texpr_LocalTime() adlast.ATypeExpr[time.Time] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("common.time", "LocalTime"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[time.Time](te)
}

func AST_LocalTime() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"LocalTime",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_newtype_(
			adlast.MakeAll_NewType(
				[]adlast.Ident{},
				adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_primitive(
						"String",
					),
					[]adlast.TypeExpr{},
				),
				types.Make_Maybe_just[any](
					"00:00:00",
				),
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("adlc.config.go_", "GoCustomType"): map[string]interface{}{"gotype": map[string]interface{}{"import_path": "time", "name": "Time", "pkg": "time", "type_constraints": []interface{}{}}, "helpers": map[string]interface{}{"name": "LocalTimeHelpers", "ref": interface{}(nil)}}, adlast.Make_ScopedName("sys.annotations", "Doc"): "A time in ISO8601 format\n"},
	)
	return adlast.Make_ScopedDecl("common.time", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("common.time", "LocalTime"),
		AST_LocalTime(),
	)
	goadl.RESOLVER.RegisterHelper(
		adlast.Make_ScopedName("common.time", "LocalTime"),
		(*LocalTimeHelpers)(nil),
	)
}

func Texpr_Timezone() adlast.ATypeExpr[Timezone] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("common.time", "Timezone"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[Timezone](te)
}

func AST_Timezone() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"Timezone",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_newtype_(
			adlast.MakeAll_NewType(
				[]adlast.Ident{},
				adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_reference(
						adlast.MakeAll_ScopedName(
							"common.strings",
							"StringNE",
						),
					),
					[]adlast.TypeExpr{},
				),
				types.Make_Maybe_nothing[any](),
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "An IANA timezone\n"},
	)
	return adlast.Make_ScopedDecl("common.time", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("common.time", "Timezone"),
		AST_Timezone(),
	)
}
