// Code generated by goadlc v3 - DO NOT EDIT.
package time

import (
	"fmt"
	strings2 "github.com/adl-lang/goadl_common/common/strings"
)

type DayOfWeek struct {
	Branch DayOfWeekBranch
}

type DayOfWeekBranch interface {
	isDayOfWeekBranch()
}

func (*DayOfWeek) MakeNewBranch(key string) (any, error) {
	switch key {
	case "monday":
		return &_DayOfWeek_Monday{}, nil
	case "tuesday":
		return &_DayOfWeek_Tuesday{}, nil
	case "wednesday":
		return &_DayOfWeek_Wednesday{}, nil
	case "thursday":
		return &_DayOfWeek_Thursday{}, nil
	case "friday":
		return &_DayOfWeek_Friday{}, nil
	case "saturday":
		return &_DayOfWeek_Saturday{}, nil
	case "sunday":
		return &_DayOfWeek_Sunday{}, nil
	}
	return nil, fmt.Errorf("unknown branch is : %s", key)
}

type _DayOfWeek_Monday struct {
	V struct{} `branch:"monday"`
}
type _DayOfWeek_Tuesday struct {
	V struct{} `branch:"tuesday"`
}
type _DayOfWeek_Wednesday struct {
	V struct{} `branch:"wednesday"`
}
type _DayOfWeek_Thursday struct {
	V struct{} `branch:"thursday"`
}
type _DayOfWeek_Friday struct {
	V struct{} `branch:"friday"`
}
type _DayOfWeek_Saturday struct {
	V struct{} `branch:"saturday"`
}
type _DayOfWeek_Sunday struct {
	V struct{} `branch:"sunday"`
}

func (_DayOfWeek_Monday) isDayOfWeekBranch()    {}
func (_DayOfWeek_Tuesday) isDayOfWeekBranch()   {}
func (_DayOfWeek_Wednesday) isDayOfWeekBranch() {}
func (_DayOfWeek_Thursday) isDayOfWeekBranch()  {}
func (_DayOfWeek_Friday) isDayOfWeekBranch()    {}
func (_DayOfWeek_Saturday) isDayOfWeekBranch()  {}
func (_DayOfWeek_Sunday) isDayOfWeekBranch()    {}

func Make_DayOfWeek_monday() DayOfWeek {
	return DayOfWeek{
		_DayOfWeek_Monday{struct{}{}},
	}
}

func Make_DayOfWeek_tuesday() DayOfWeek {
	return DayOfWeek{
		_DayOfWeek_Tuesday{struct{}{}},
	}
}

func Make_DayOfWeek_wednesday() DayOfWeek {
	return DayOfWeek{
		_DayOfWeek_Wednesday{struct{}{}},
	}
}

func Make_DayOfWeek_thursday() DayOfWeek {
	return DayOfWeek{
		_DayOfWeek_Thursday{struct{}{}},
	}
}

func Make_DayOfWeek_friday() DayOfWeek {
	return DayOfWeek{
		_DayOfWeek_Friday{struct{}{}},
	}
}

func Make_DayOfWeek_saturday() DayOfWeek {
	return DayOfWeek{
		_DayOfWeek_Saturday{struct{}{}},
	}
}

func Make_DayOfWeek_sunday() DayOfWeek {
	return DayOfWeek{
		_DayOfWeek_Sunday{struct{}{}},
	}
}

func (un DayOfWeek) Cast_monday() (struct{}, bool) {
	br, ok := un.Branch.(_DayOfWeek_Monday)
	return br.V, ok
}

func (un DayOfWeek) Cast_tuesday() (struct{}, bool) {
	br, ok := un.Branch.(_DayOfWeek_Tuesday)
	return br.V, ok
}

func (un DayOfWeek) Cast_wednesday() (struct{}, bool) {
	br, ok := un.Branch.(_DayOfWeek_Wednesday)
	return br.V, ok
}

func (un DayOfWeek) Cast_thursday() (struct{}, bool) {
	br, ok := un.Branch.(_DayOfWeek_Thursday)
	return br.V, ok
}

func (un DayOfWeek) Cast_friday() (struct{}, bool) {
	br, ok := un.Branch.(_DayOfWeek_Friday)
	return br.V, ok
}

func (un DayOfWeek) Cast_saturday() (struct{}, bool) {
	br, ok := un.Branch.(_DayOfWeek_Saturday)
	return br.V, ok
}

func (un DayOfWeek) Cast_sunday() (struct{}, bool) {
	br, ok := un.Branch.(_DayOfWeek_Sunday)
	return br.V, ok
}

func Handle_DayOfWeek[T any](
	_in DayOfWeek,
	monday func(monday struct{}) T,
	tuesday func(tuesday struct{}) T,
	wednesday func(wednesday struct{}) T,
	thursday func(thursday struct{}) T,
	friday func(friday struct{}) T,
	saturday func(saturday struct{}) T,
	sunday func(sunday struct{}) T,
	_default func() T,
) T {
	switch _b := _in.Branch.(type) {
	case _DayOfWeek_Monday:
		if monday != nil {
			return monday(_b.V)
		}
	case _DayOfWeek_Tuesday:
		if tuesday != nil {
			return tuesday(_b.V)
		}
	case _DayOfWeek_Wednesday:
		if wednesday != nil {
			return wednesday(_b.V)
		}
	case _DayOfWeek_Thursday:
		if thursday != nil {
			return thursday(_b.V)
		}
	case _DayOfWeek_Friday:
		if friday != nil {
			return friday(_b.V)
		}
	case _DayOfWeek_Saturday:
		if saturday != nil {
			return saturday(_b.V)
		}
	case _DayOfWeek_Sunday:
		if sunday != nil {
			return sunday(_b.V)
		}
	}
	if _default != nil {
		return _default()
	}
	panic("unhandled branch in : DayOfWeek")
}

func HandleWithErr_DayOfWeek[T any](
	_in DayOfWeek,
	monday func(monday struct{}) (T, error),
	tuesday func(tuesday struct{}) (T, error),
	wednesday func(wednesday struct{}) (T, error),
	thursday func(thursday struct{}) (T, error),
	friday func(friday struct{}) (T, error),
	saturday func(saturday struct{}) (T, error),
	sunday func(sunday struct{}) (T, error),
	_default func() (T, error),
) (T, error) {
	switch _b := _in.Branch.(type) {
	case _DayOfWeek_Monday:
		if monday != nil {
			return monday(_b.V)
		}
	case _DayOfWeek_Tuesday:
		if tuesday != nil {
			return tuesday(_b.V)
		}
	case _DayOfWeek_Wednesday:
		if wednesday != nil {
			return wednesday(_b.V)
		}
	case _DayOfWeek_Thursday:
		if thursday != nil {
			return thursday(_b.V)
		}
	case _DayOfWeek_Friday:
		if friday != nil {
			return friday(_b.V)
		}
	case _DayOfWeek_Saturday:
		if saturday != nil {
			return saturday(_b.V)
		}
	case _DayOfWeek_Sunday:
		if sunday != nil {
			return sunday(_b.V)
		}
	}
	if _default != nil {
		return _default()
	}
	panic("unhandled branch in : DayOfWeek")
}

type Duration string

type Timezone strings2.StringNE
