// Code generated by goadlc v3 - DO NOT EDIT.
package db

import (
	goadl "github.com/adl-lang/goadl_rt/v3"
	"github.com/adl-lang/goadl_rt/v3/customtypes"
	"github.com/adl-lang/goadl_rt/v3/sys/adlast"
	"github.com/adl-lang/goadl_rt/v3/sys/types"
)

func Texpr_DbColumnName() adlast.ATypeExpr[DbColumnName] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("common.db", "DbColumnName"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[DbColumnName](te)
}

func AST_DbColumnName() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"DbColumnName",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_type_(
			adlast.MakeAll_TypeDef(
				[]adlast.Ident{},
				adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_primitive(
						"String",
					),
					[]adlast.TypeExpr{},
				),
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "Field level annotation to override the name of the\ndatabase column.\n"},
	)
	return adlast.Make_ScopedDecl("common.db", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("common.db", "DbColumnName"),
		AST_DbColumnName(),
	)
}

func Texpr_DbColumnType() adlast.ATypeExpr[DbColumnType] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("common.db", "DbColumnType"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[DbColumnType](te)
}

func AST_DbColumnType() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"DbColumnType",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_type_(
			adlast.MakeAll_TypeDef(
				[]adlast.Ident{},
				adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_primitive(
						"String",
					),
					[]adlast.TypeExpr{},
				),
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "Field or type level annotation to override the type of the\ndatabase column.\n"},
	)
	return adlast.Make_ScopedDecl("common.db", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("common.db", "DbColumnType"),
		AST_DbColumnType(),
	)
}

func Texpr_DbKey[T any](t adlast.ATypeExpr[T]) adlast.ATypeExpr[DbKey[T]] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("common.db", "DbKey"),
		),
		[]adlast.TypeExpr{t.Value},
	)
	return adlast.Make_ATypeExpr[DbKey[T]](te)
}

func AST_DbKey() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"DbKey",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_newtype_(
			adlast.MakeAll_NewType(
				[]adlast.Ident{
					"T",
				},
				adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_primitive(
						"String",
					),
					[]adlast.TypeExpr{},
				),
				types.Make_Maybe_nothing[any](),
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "A reference for a database stored value, referenced by a\nstring primary key.\n"},
	)
	return adlast.Make_ScopedDecl("common.db", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("common.db", "DbKey"),
		AST_DbKey(),
	)
}

func Texpr_DbPrimaryKey() adlast.ATypeExpr[DbPrimaryKey] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("common.db", "DbPrimaryKey"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[DbPrimaryKey](te)
}

func AST_DbPrimaryKey() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"DbPrimaryKey",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_type_(
			adlast.MakeAll_TypeDef(
				[]adlast.Ident{},
				adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_primitive(
						"Void",
					),
					[]adlast.TypeExpr{},
				),
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "Field level annotation to indicate that that field\nis part of the primary key\n"},
	)
	return adlast.Make_ScopedDecl("common.db", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("common.db", "DbPrimaryKey"),
		AST_DbPrimaryKey(),
	)
}

func Texpr_DbSpread() adlast.ATypeExpr[DbSpread] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("common.db", "DbSpread"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[DbSpread](te)
}

func AST_DbSpread() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"DbSpread",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_type_(
			adlast.MakeAll_TypeDef(
				[]adlast.Ident{},
				adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_primitive(
						"Void",
					),
					[]adlast.TypeExpr{},
				),
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "Field level annotation to indicate that that the fields\ncontained in this field should be lifted up to the current\ntable.\n"},
	)
	return adlast.Make_ScopedDecl("common.db", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("common.db", "DbSpread"),
		AST_DbSpread(),
	)
}

func Texpr_DbTable() adlast.ATypeExpr[DbTable] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("common.db", "DbTable"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[DbTable](te)
}

func AST_DbTable() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"DbTable",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"table_name",
						"table_name",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_just[any](
							"",
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"indexes",
						"indexes",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Vector",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_primitive(
										"Vector",
									),
									[]adlast.TypeExpr{
										adlast.MakeAll_TypeExpr(
											adlast.Make_TypeRef_primitive(
												"String",
											),
											[]adlast.TypeExpr{},
										),
									},
								),
							},
						),
						types.Make_Maybe_just[any](
							[]interface{}{},
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"uniqueness_constraints",
						"uniqueness_constraints",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Vector",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_primitive(
										"Vector",
									),
									[]adlast.TypeExpr{
										adlast.MakeAll_TypeExpr(
											adlast.Make_TypeRef_primitive(
												"String",
											),
											[]adlast.TypeExpr{},
										),
									},
								),
							},
						),
						types.Make_Maybe_just[any](
							[]interface{}{},
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"extra_sql",
						"extra_sql",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Vector",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_primitive(
										"String",
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							[]interface{}{},
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"label",
						"label",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Vector",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_primitive(
										"String",
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							[]interface{}{},
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"id_prefix",
						"id_prefix",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_just[any](
							"",
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("common.db", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("common.db", "DbTable"),
		AST_DbTable(),
	)
}

func Texpr_DbView() adlast.ATypeExpr[DbView] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("common.db", "DbView"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[DbView](te)
}

func AST_DbView() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"DbView",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"view_name",
						"view_name",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_just[any](
							"",
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("common.db", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("common.db", "DbView"),
		AST_DbView(),
	)
}

func Texpr_WithId[T any](t adlast.ATypeExpr[T]) adlast.ATypeExpr[WithId[T]] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("common.db", "WithId"),
		),
		[]adlast.TypeExpr{t.Value},
	)
	return adlast.Make_ATypeExpr[WithId[T]](te)
}

func AST_WithId() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"WithId",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{
					"T",
				},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"id",
						"id",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("common.db", "DbPrimaryKey"): nil},
					),
					adlast.MakeAll_Field(
						"value",
						"value",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_typeParam(
								"T",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("common.db", "DbSpread"): nil},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "Extent a datatype for use as a database table, giving it a\nprimary key\n"},
	)
	return adlast.Make_ScopedDecl("common.db", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("common.db", "WithId"),
		AST_WithId(),
	)
}
