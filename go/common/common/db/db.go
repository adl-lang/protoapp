// Code generated by goadlc v3 - DO NOT EDIT.
package db

import ()

type DbColumnName = string

type DbColumnType = string

type DbKey[T any] string

type DbPrimaryKey = struct{}

type DbSpread = struct{}

type DbTable struct {
	_DbTable
}

type _DbTable struct {
	Table_name             string     `json:"table_name"`
	Indexes                [][]string `json:"indexes"`
	Uniqueness_constraints [][]string `json:"uniqueness_constraints"`
	Extra_sql              []string   `json:"extra_sql"`
	Label                  []string   `json:"label"`
}

func MakeAll_DbTable(
	table_name string,
	indexes [][]string,
	uniqueness_constraints [][]string,
	extra_sql []string,
	label []string,
) DbTable {
	return DbTable{
		_DbTable{
			Table_name:             table_name,
			Indexes:                indexes,
			Uniqueness_constraints: uniqueness_constraints,
			Extra_sql:              extra_sql,
			Label:                  label,
		},
	}
}

func Make_DbTable() DbTable {
	ret := DbTable{
		_DbTable{
			Table_name:             ((*DbTable)(nil)).Default_table_name(),
			Indexes:                ((*DbTable)(nil)).Default_indexes(),
			Uniqueness_constraints: ((*DbTable)(nil)).Default_uniqueness_constraints(),
			Extra_sql:              ((*DbTable)(nil)).Default_extra_sql(),
			Label:                  ((*DbTable)(nil)).Default_label(),
		},
	}
	return ret
}

func (*DbTable) Default_table_name() string {
	return ""
}
func (*DbTable) Default_indexes() [][]string {
	return [][]string{}
}
func (*DbTable) Default_uniqueness_constraints() [][]string {
	return [][]string{}
}
func (*DbTable) Default_extra_sql() []string {
	return []string{}
}
func (*DbTable) Default_label() []string {
	return []string{}
}

type DbView struct {
	_DbView
}

type _DbView struct {
	View_name string `json:"view_name"`
}

func MakeAll_DbView(
	view_name string,
) DbView {
	return DbView{
		_DbView{
			View_name: view_name,
		},
	}
}

func Make_DbView() DbView {
	ret := DbView{
		_DbView{
			View_name: ((*DbView)(nil)).Default_view_name(),
		},
	}
	return ret
}

func (*DbView) Default_view_name() string {
	return ""
}

type WithId[T any] struct {
	_WithId[T]
}

type _WithId[T any] struct {
	Id    string `json:"id"`
	Value T      `json:"value"`
}

func MakeAll_WithId[T any](
	id string,
	value T,
) WithId[T] {
	return WithId[T]{
		_WithId[T]{
			Id:    id,
			Value: value,
		},
	}
}

func Make_WithId[T any](
	id string,
	value T,
) WithId[T] {
	ret := WithId[T]{
		_WithId[T]{
			Id:    id,
			Value: value,
		},
	}
	return ret
}
