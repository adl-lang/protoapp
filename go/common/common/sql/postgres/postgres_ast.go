// Code generated by goadlc v3 - DO NOT EDIT.
package postgres

import (
	goadl "github.com/adl-lang/goadl_rt/v3"
	"github.com/adl-lang/goadl_rt/v3/customtypes"
	"github.com/adl-lang/goadl_rt/v3/sys/adlast"
	"github.com/adl-lang/goadl_rt/v3/sys/types"
)

func Texpr_InsertExprs[T any](t adlast.ATypeExpr[T]) adlast.ATypeExpr[InsertExprs[T]] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("common.sql.postgres", "InsertExprs"),
		),
		[]adlast.TypeExpr{t.Value},
	)
	return adlast.Make_ATypeExpr[InsertExprs[T]](te)
}

func AST_InsertExprs() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"InsertExprs",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{
					"T",
				},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"cols",
						"cols",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Vector",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_primitive(
										"String",
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"tableName",
						"tableName",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("common.sql.postgres", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("common.sql.postgres", "InsertExprs"),
		AST_InsertExprs(),
	)
}

func Texpr_SelectExpr() adlast.ATypeExpr[SelectExpr] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("common.sql.postgres", "SelectExpr"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[SelectExpr](te)
}

func AST_SelectExpr() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"SelectExpr",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"field",
						"field",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"fieldPrefix",
						"fieldPrefix",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Vector",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_primitive(
										"String",
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("common.sql.postgres", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("common.sql.postgres", "SelectExpr"),
		AST_SelectExpr(),
	)
}

func Texpr_SelectExprsFrom() adlast.ATypeExpr[SelectExprsFrom] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("common.sql.postgres", "SelectExprsFrom"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[SelectExprsFrom](te)
}

func AST_SelectExprsFrom() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"SelectExprsFrom",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"selExprs",
						"selExprs",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Vector",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"common.sql.postgres",
											"SelectExpr",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"tableName",
						"tableName",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"tableAlias",
						"tableAlias",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"wheres",
						"wheres",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Vector",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"common.sql.postgres",
											"WhereCondition",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							[]interface{}{},
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("common.sql.postgres", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("common.sql.postgres", "SelectExprsFrom"),
		AST_SelectExprsFrom(),
	)
}

func Texpr_SelectJoin() adlast.ATypeExpr[SelectJoin] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("common.sql.postgres", "SelectJoin"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[SelectJoin](te)
}

func AST_SelectJoin() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"SelectJoin",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"a",
						"a",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.sql.postgres",
									"SelectExprsFrom",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"b",
						"b",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Vector",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"common.sql.postgres",
											"SelectJoinPart",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("common.sql.postgres", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("common.sql.postgres", "SelectJoin"),
		AST_SelectJoin(),
	)
}

func Texpr_SelectJoinPart() adlast.ATypeExpr[SelectJoinPart] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("common.sql.postgres", "SelectJoinPart"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[SelectJoinPart](te)
}

func AST_SelectJoinPart() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"SelectJoinPart",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"sef",
						"sef",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.sql.postgres",
									"SelectExprsFrom",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"col",
						"col",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"toTableAlias",
						"toTableAlias",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"toCol",
						"toCol",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("common.sql.postgres", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("common.sql.postgres", "SelectJoinPart"),
		AST_SelectJoinPart(),
	)
}

func Texpr_WhereCondition() adlast.ATypeExpr[WhereCondition] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("common.sql.postgres", "WhereCondition"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[WhereCondition](te)
}

func AST_WhereCondition() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"WhereCondition",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"eqStr",
						"eqStr",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.sql.postgres",
									"WhereEq",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_primitive(
										"String",
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("common.sql.postgres", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("common.sql.postgres", "WhereCondition"),
		AST_WhereCondition(),
	)
}

func Texpr_WhereEq[T any](t adlast.ATypeExpr[T]) adlast.ATypeExpr[WhereEq[T]] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("common.sql.postgres", "WhereEq"),
		),
		[]adlast.TypeExpr{t.Value},
	)
	return adlast.Make_ATypeExpr[WhereEq[T]](te)
}

func AST_WhereEq() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"WhereEq",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{
					"T",
				},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"col",
						"col",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("common.sql.postgres", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("common.sql.postgres", "WhereEq"),
		AST_WhereEq(),
	)
}
