// Code generated by goadlc v3 - DO NOT EDIT.
package http

import (
	goadl "github.com/adl-lang/goadl_rt/v3"
	"github.com/adl-lang/goadl_rt/v3/customtypes"
	"github.com/adl-lang/goadl_rt/v3/sys/adlast"
	"github.com/adl-lang/goadl_rt/v3/sys/types"
)

func Texpr_HttpDelete[P any, O any](p adlast.ATypeExpr[P], o adlast.ATypeExpr[O]) adlast.ATypeExpr[HttpDelete[P, O]] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("common.http", "HttpDelete"),
		),
		[]adlast.TypeExpr{p.Value, o.Value},
	)
	return adlast.Make_ATypeExpr[HttpDelete[P, O]](te)
}

func AST_HttpDelete() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"HttpDelete",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{
					"P",
					"O",
				},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"path",
						"path",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"security",
						"security",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.http",
									"HttpSecurity",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"paramsType",
						"paramsType",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"TypeToken",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_typeParam(
										"P",
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							nil,
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"respType",
						"respType",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"TypeToken",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_typeParam(
										"O",
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							nil,
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("common.http", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("common.http", "HttpDelete"),
		AST_HttpDelete(),
	)
}

func Texpr_HttpGet[O any](o adlast.ATypeExpr[O]) adlast.ATypeExpr[HttpGet[O]] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("common.http", "HttpGet"),
		),
		[]adlast.TypeExpr{o.Value},
	)
	return adlast.Make_ATypeExpr[HttpGet[O]](te)
}

func AST_HttpGet() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"HttpGet",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{
					"O",
				},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"path",
						"path",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"security",
						"security",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.http",
									"HttpSecurity",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"rateLimit",
						"rateLimit",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Nullable",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"common.http",
											"HttpRateLimit",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							nil,
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"respType",
						"respType",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"TypeToken",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_typeParam(
										"O",
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							nil,
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "Request types\n"},
	)
	return adlast.Make_ScopedDecl("common.http", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("common.http", "HttpGet"),
		AST_HttpGet(),
	)
}

func Texpr_HttpPost[I any, O any](i adlast.ATypeExpr[I], o adlast.ATypeExpr[O]) adlast.ATypeExpr[HttpPost[I, O]] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("common.http", "HttpPost"),
		),
		[]adlast.TypeExpr{i.Value, o.Value},
	)
	return adlast.Make_ATypeExpr[HttpPost[I, O]](te)
}

func AST_HttpPost() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"HttpPost",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{
					"I",
					"O",
				},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"path",
						"path",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"security",
						"security",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.http",
									"HttpSecurity",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"rateLimit",
						"rateLimit",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Nullable",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"common.http",
											"HttpRateLimit",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							nil,
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"reqType",
						"reqType",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"TypeToken",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_typeParam(
										"I",
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							nil,
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"respType",
						"respType",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"TypeToken",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_typeParam(
										"O",
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							nil,
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("common.http", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("common.http", "HttpPost"),
		AST_HttpPost(),
	)
}

func Texpr_HttpPut[I any, O any](i adlast.ATypeExpr[I], o adlast.ATypeExpr[O]) adlast.ATypeExpr[HttpPut[I, O]] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("common.http", "HttpPut"),
		),
		[]adlast.TypeExpr{i.Value, o.Value},
	)
	return adlast.Make_ATypeExpr[HttpPut[I, O]](te)
}

func AST_HttpPut() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"HttpPut",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{
					"I",
					"O",
				},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"path",
						"path",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"security",
						"security",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.http",
									"HttpSecurity",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"rateLimit",
						"rateLimit",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Nullable",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"common.http",
											"HttpRateLimit",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							nil,
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"reqType",
						"reqType",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"TypeToken",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_typeParam(
										"I",
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							nil,
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"respType",
						"respType",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"TypeToken",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_typeParam(
										"O",
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							nil,
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("common.http", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("common.http", "HttpPut"),
		AST_HttpPut(),
	)
}

func Texpr_HttpRateLimit() adlast.ATypeExpr[HttpRateLimit] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("common.http", "HttpRateLimit"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[HttpRateLimit](te)
}

func AST_HttpRateLimit() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"HttpRateLimit",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"maxRequests",
						"maxRequests",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Word32",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"perTimeUnit",
						"perTimeUnit",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.http",
									"RateLimitTimeUnit",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("common.http", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("common.http", "HttpRateLimit"),
		AST_HttpRateLimit(),
	)
}

func Texpr_HttpSecurity() adlast.ATypeExpr[HttpSecurity] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("common.http", "HttpSecurity"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[HttpSecurity](te)
}

func AST_HttpSecurity() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"HttpSecurity",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"public",
						"public",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Void",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"token",
						"token",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Void",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"tokenWithRole",
						"tokenWithRole",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("common.http", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("common.http", "HttpSecurity"),
		AST_HttpSecurity(),
	)
}

func Texpr_RateLimitTimeUnit() adlast.ATypeExpr[RateLimitTimeUnit] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("common.http", "RateLimitTimeUnit"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[RateLimitTimeUnit](te)
}

func AST_RateLimitTimeUnit() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"RateLimitTimeUnit",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"second",
						"second",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Void",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"minute",
						"minute",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Void",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"hour",
						"hour",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Void",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("common.http", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("common.http", "RateLimitTimeUnit"),
		AST_RateLimitTimeUnit(),
	)
}

func Texpr_Unit() adlast.ATypeExpr[Unit] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("common.http", "Unit"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[Unit](te)
}

func AST_Unit() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"Unit",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "Empty Struct (Used mostly for Void RPC responses)\n"},
	)
	return adlast.Make_ScopedDecl("common.http", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("common.http", "Unit"),
		AST_Unit(),
	)
}
