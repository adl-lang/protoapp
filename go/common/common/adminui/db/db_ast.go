// Code generated by goadlc v3 - DO NOT EDIT.
package db

import (
	goadl "github.com/adl-lang/goadl_rt/v3"
	"github.com/adl-lang/goadl_rt/v3/customtypes"
	"github.com/adl-lang/goadl_rt/v3/sys/adlast"
	"github.com/adl-lang/goadl_rt/v3/sys/types"
)

func Texpr_MetaAdlDecl() adlast.ATypeExpr[MetaAdlDecl] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("common.adminui.db", "MetaAdlDecl"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[MetaAdlDecl](te)
}

func AST_MetaAdlDecl() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"MetaAdlDecl",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"module_name",
						"module_name",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"sys.adlast",
									"ModuleName",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("common.db", "DbPrimaryKey"): nil},
					),
					adlast.MakeAll_Field(
						"name",
						"name",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("common.db", "DbPrimaryKey"): nil},
					),
					adlast.MakeAll_Field(
						"decl",
						"decl",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"sys.adlast",
									"Decl",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("common.db", "DbTable"): map[string]interface{}{"extra_sql": []interface{}{"grant select on meta_adl_decl to admin_user;"}, "table_name": "meta_adl_decl"}},
	)
	return adlast.Make_ScopedDecl("common.adminui.db", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("common.adminui.db", "MetaAdlDecl"),
		AST_MetaAdlDecl(),
	)
}

func Texpr_MetaTable() adlast.ATypeExpr[MetaTable] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("common.adminui.db", "MetaTable"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[MetaTable](te)
}

func AST_MetaTable() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"MetaTable",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"name",
						"name",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("common.db", "DbPrimaryKey"): nil},
					),
					adlast.MakeAll_Field(
						"description",
						"description",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"decl_module_name",
						"decl_module_name",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"sys.adlast",
									"ModuleName",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"decl_name",
						"decl_name",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("common.db", "DbTable"): map[string]interface{}{"extra_sql": []interface{}{"grant select on meta_table to admin_user;"}, "table_name": "meta_table"}},
	)
	return adlast.Make_ScopedDecl("common.adminui.db", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("common.adminui.db", "MetaTable"),
		AST_MetaTable(),
	)
}
