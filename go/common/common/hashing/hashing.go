// Code generated by goadlc v3 - DO NOT EDIT.
package hashing

import (
	"fmt"
)

type Algorithm struct {
	Branch AlgorithmBranch
}

type AlgorithmBranch interface {
	isAlgorithmBranch()
}

func (*Algorithm) MakeNewBranch(key string) (any, error) {
	switch key {
	case "bcrypt":
		return &_Algorithm_Bcrypt{}, nil
	case "argon2id":
		return &_Algorithm_Argon2id{}, nil
	}
	return nil, fmt.Errorf("unknown branch is : %s", key)
}

type _Algorithm_Bcrypt struct {
	V BcryptParams `branch:"bcrypt"`
}
type _Algorithm_Argon2id struct {
	V Argon2idParams `branch:"argon2id"`
}

func (_Algorithm_Bcrypt) isAlgorithmBranch()   {}
func (_Algorithm_Argon2id) isAlgorithmBranch() {}

func Make_Algorithm_bcrypt(v BcryptParams) Algorithm {
	return Algorithm{
		_Algorithm_Bcrypt{v},
	}
}

func Make_Algorithm_argon2id(v Argon2idParams) Algorithm {
	return Algorithm{
		_Algorithm_Argon2id{v},
	}
}

func (un Algorithm) Cast_bcrypt() (BcryptParams, bool) {
	br, ok := un.Branch.(_Algorithm_Bcrypt)
	return br.V, ok
}

func (un Algorithm) Cast_argon2id() (Argon2idParams, bool) {
	br, ok := un.Branch.(_Algorithm_Argon2id)
	return br.V, ok
}

func Handle_Algorithm[T any](
	_in Algorithm,
	bcrypt func(bcrypt BcryptParams) T,
	argon2id func(argon2id Argon2idParams) T,
	_default func() T,
) T {
	switch _b := _in.Branch.(type) {
	case _Algorithm_Bcrypt:
		if bcrypt != nil {
			return bcrypt(_b.V)
		}
	case _Algorithm_Argon2id:
		if argon2id != nil {
			return argon2id(_b.V)
		}
	}
	if _default != nil {
		return _default()
	}
	panic("unhandled branch in : Algorithm")
}

func HandleWithErr_Algorithm[T any](
	_in Algorithm,
	bcrypt func(bcrypt BcryptParams) (T, error),
	argon2id func(argon2id Argon2idParams) (T, error),
	_default func() (T, error),
) (T, error) {
	switch _b := _in.Branch.(type) {
	case _Algorithm_Bcrypt:
		if bcrypt != nil {
			return bcrypt(_b.V)
		}
	case _Algorithm_Argon2id:
		if argon2id != nil {
			return argon2id(_b.V)
		}
	}
	if _default != nil {
		return _default()
	}
	panic("unhandled branch in : Algorithm")
}

type Argon2idParams struct {
	_Argon2idParams
}

type _Argon2idParams struct {
	Memory      uint32 `json:"memory"`
	Iterations  uint32 `json:"iterations"`
	Parallelism uint8  `json:"parallelism"`
	SaltLength  uint32 `json:"saltLength"`
	KeyLength   uint32 `json:"keyLength"`
}

func MakeAll_Argon2idParams(
	memory uint32,
	iterations uint32,
	parallelism uint8,
	saltlength uint32,
	keylength uint32,
) Argon2idParams {
	return Argon2idParams{
		_Argon2idParams{
			Memory:      memory,
			Iterations:  iterations,
			Parallelism: parallelism,
			SaltLength:  saltlength,
			KeyLength:   keylength,
		},
	}
}

func Make_Argon2idParams() Argon2idParams {
	ret := Argon2idParams{
		_Argon2idParams{
			Memory:      ((*Argon2idParams)(nil)).Default_memory(),
			Iterations:  ((*Argon2idParams)(nil)).Default_iterations(),
			Parallelism: ((*Argon2idParams)(nil)).Default_parallelism(),
			SaltLength:  ((*Argon2idParams)(nil)).Default_saltLength(),
			KeyLength:   ((*Argon2idParams)(nil)).Default_keyLength(),
		},
	}
	return ret
}

func (*Argon2idParams) Default_memory() uint32 {
	return 65536
}
func (*Argon2idParams) Default_iterations() uint32 {
	return 3
}
func (*Argon2idParams) Default_parallelism() uint8 {
	return 2
}
func (*Argon2idParams) Default_saltLength() uint32 {
	return 16
}
func (*Argon2idParams) Default_keyLength() uint32 {
	return 32
}

type BcryptParams struct {
	_BcryptParams
}

type _BcryptParams struct {
	Cost uint8 `json:"cost"`
}

func MakeAll_BcryptParams(
	cost uint8,
) BcryptParams {
	return BcryptParams{
		_BcryptParams{
			Cost: cost,
		},
	}
}

func Make_BcryptParams() BcryptParams {
	ret := BcryptParams{
		_BcryptParams{
			Cost: ((*BcryptParams)(nil)).Default_cost(),
		},
	}
	return ret
}

func (*BcryptParams) Default_cost() uint8 {
	return 10
}
