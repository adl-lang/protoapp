// Code generated by goadlc v3 - DO NOT EDIT.
package hashing

import (
	goadl "github.com/adl-lang/goadl_rt/v3"
	"github.com/adl-lang/goadl_rt/v3/customtypes"
	"github.com/adl-lang/goadl_rt/v3/sys/adlast"
	"github.com/adl-lang/goadl_rt/v3/sys/types"
)

func Texpr_Algorithm() adlast.ATypeExpr[Algorithm] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("common.hashing", "Algorithm"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[Algorithm](te)
}

func AST_Algorithm() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"Algorithm",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"bcrypt",
						"bcrypt",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.hashing",
									"BcryptParams",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"argon2id",
						"argon2id",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.hashing",
									"Argon2idParams",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("common.hashing", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("common.hashing", "Algorithm"),
		AST_Algorithm(),
	)
}

func Texpr_Argon2idParams() adlast.ATypeExpr[Argon2idParams] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("common.hashing", "Argon2idParams"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[Argon2idParams](te)
}

func AST_Argon2idParams() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"Argon2idParams",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"memory",
						"memory",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Word32",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_just[any](
							65536,
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"iterations",
						"iterations",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Word32",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_just[any](
							3,
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"parallelism",
						"parallelism",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Word8",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_just[any](
							2,
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"saltLength",
						"saltLength",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Word32",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_just[any](
							16,
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"keyLength",
						"keyLength",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Word32",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_just[any](
							32,
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("common.hashing", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("common.hashing", "Argon2idParams"),
		AST_Argon2idParams(),
	)
}

func Texpr_BcryptParams() adlast.ATypeExpr[BcryptParams] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("common.hashing", "BcryptParams"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[BcryptParams](te)
}

func AST_BcryptParams() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"BcryptParams",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"cost",
						"cost",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Word8",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_just[any](
							10,
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("common.hashing", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("common.hashing", "BcryptParams"),
		AST_BcryptParams(),
	)
}
