// Code generated by goadlc v3 - DO NOT EDIT.
package cap

import (
	goadl "github.com/adl-lang/goadl_rt/v3"
	"github.com/adl-lang/goadl_rt/v3/customtypes"
	"github.com/adl-lang/goadl_rt/v3/sys/adlast"
	"github.com/adl-lang/goadl_rt/v3/sys/types"
)

func Texpr_A_Api() adlast.ATypeExpr[A_Api] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("protoapp.apis.cap", "A_Api"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[A_Api](te)
}

func AST_A_Api() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"A_Api",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"b",
						"b",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.capability",
									"HttpPost",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.cap",
											"A_ApiToken",
										),
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.cap",
											"B_ApiResp",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{"path": "/b"},
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"accessTokenApi",
						"accessTokenApi",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.capability",
									"CapabilityApi",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.cap",
											"A_ApiToken",
										),
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"common.http",
											"Unit",
										),
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.cap",
											"B_Api",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{"service": map[string]interface{}{}},
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("protoapp.apis.cap", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("protoapp.apis.cap", "A_Api"),
		AST_A_Api(),
	)
}

func Texpr_A_ApiResp() adlast.ATypeExpr[A_ApiResp] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("protoapp.apis.cap", "A_ApiResp"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[A_ApiResp](te)
}

func AST_A_ApiResp() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"A_ApiResp",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"token",
						"token",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("protoapp.apis.cap", "A_ApiTokenMarker"): map[string]interface{}{}},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("protoapp.apis.cap", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("protoapp.apis.cap", "A_ApiResp"),
		AST_A_ApiResp(),
	)
}

func Texpr_A_ApiToken() adlast.ATypeExpr[A_ApiToken] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("protoapp.apis.cap", "A_ApiToken"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[A_ApiToken](te)
}

func AST_A_ApiToken() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"A_ApiToken",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_type_(
			adlast.MakeAll_TypeDef(
				[]adlast.Ident{},
				adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_primitive(
						"String",
					),
					[]adlast.TypeExpr{},
				),
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("protoapp.apis.cap", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("protoapp.apis.cap", "A_ApiToken"),
		AST_A_ApiToken(),
	)
}

func Texpr_A_ApiTokenMarker() adlast.ATypeExpr[A_ApiTokenMarker] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("protoapp.apis.cap", "A_ApiTokenMarker"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[A_ApiTokenMarker](te)
}

func AST_A_ApiTokenMarker() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"A_ApiTokenMarker",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_type_(
			adlast.MakeAll_TypeDef(
				[]adlast.Ident{},
				adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_reference(
						adlast.MakeAll_ScopedName(
							"common.capability",
							"CapabilityToken",
						),
					),
					[]adlast.TypeExpr{
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"protoapp.apis.cap",
									"A_ApiToken",
								),
							),
							[]adlast.TypeExpr{},
						),
					},
				),
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("protoapp.apis.cap", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("protoapp.apis.cap", "A_ApiTokenMarker"),
		AST_A_ApiTokenMarker(),
	)
}

func Texpr_AccessApiRequests() adlast.ATypeExpr[AccessApiRequests] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("protoapp.apis.cap", "AccessApiRequests"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[AccessApiRequests](te)
}

func AST_AccessApiRequests() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"AccessApiRequests",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"newMessage",
						"newMessage",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.capability",
									"HttpPost",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.types",
											"NewMessageReq",
										),
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.db",
											"MessageId",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{"path": "/messages/new"},
						),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "Post a message to the noticeboard\n"},
					),
					adlast.MakeAll_Field(
						"recentMessages",
						"recentMessages",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.capability",
									"HttpPost",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.types",
											"RecentMessagesReq",
										),
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.types",
											"Paginated",
										),
									),
									[]adlast.TypeExpr{
										adlast.MakeAll_TypeExpr(
											adlast.Make_TypeRef_reference(
												adlast.MakeAll_ScopedName(
													"protoapp.apis.types",
													"Message",
												),
											),
											[]adlast.TypeExpr{},
										),
									},
								),
							},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{"path": "/messages/recent"},
						),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "Get recent noticeboard messages\n"},
					),
					adlast.MakeAll_Field(
						"who_am_i",
						"who_am_i",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.capability",
									"HttpGet",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.types",
											"UserWithId",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{"path": "/whoami"},
						),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "Gets info about the logged in user\n"},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("protoapp.apis.cap", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("protoapp.apis.cap", "AccessApiRequests"),
		AST_AccessApiRequests(),
	)
}

func Texpr_ApiRequests() adlast.ATypeExpr[ApiRequests] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("protoapp.apis.cap", "ApiRequests"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[ApiRequests](te)
}

func AST_ApiRequests() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"ApiRequests",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"healthy",
						"healthy",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.capability",
									"HttpGet",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"common.http",
											"Unit",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{"path": "/"},
						),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "AWS default compatible health check\n"},
					),
					adlast.MakeAll_Field(
						"ping",
						"ping",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.capability",
									"HttpPost",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"common.http",
											"Unit",
										),
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"common.http",
											"Unit",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{"path": "/ping"},
						),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "Test the server is live\n"},
					),
					adlast.MakeAll_Field(
						"login",
						"login",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.capability",
									"HttpPost",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.types",
											"LoginReq",
										),
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.types",
											"LoginResp",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{"path": "/login"},
						),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "Login a user\n\nThe response will set an httpOnly cookie containing the refresh token\n"},
					),
					adlast.MakeAll_Field(
						"new_refresh",
						"new_refresh",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.capability",
									"HttpPost",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.types",
											"LoginReq",
										),
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.types",
											"NewRefreshResp",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{"path": "/new_refresh"},
						),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "Get a refreshed token, the refresh token is used to get an access token\n"},
					),
					adlast.MakeAll_Field(
						"logout",
						"logout",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.capability",
									"HttpPost",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"common.http",
											"Unit",
										),
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"common.http",
											"Unit",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{"path": "/logout"},
						),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "Clear the `refreshToken` cookie.\n"},
					),
					adlast.MakeAll_Field(
						"a",
						"a",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.capability",
									"HttpPost",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"common.http",
											"Unit",
										),
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.cap",
											"A_ApiResp",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{"path": "/a"},
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"accessTokenApi",
						"accessTokenApi",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.capability",
									"CapabilityApi",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.cap",
											"A_ApiToken",
										),
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"common.http",
											"Unit",
										),
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.cap",
											"A_Api",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{"service": map[string]interface{}{}},
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"refreshTokenApi",
						"refreshTokenApi",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.capability",
									"CapabilityApi",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.types",
											"RefreshToken",
										),
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"common.http",
											"Unit",
										),
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.cap",
											"RefreshApiRequests",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{"name": "Refresh Token API", "service": map[string]interface{}{}},
						),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "API Endpoint used to refresh the access token\n"},
					),
					adlast.MakeAll_Field(
						"userApi",
						"userApi",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.capability",
									"CapabilityApi",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.types",
											"AdminAccessToken",
										),
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.cap",
											"Capability",
										),
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.cap",
											"UserApiRequests",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{"name": "User Admin API", "service": map[string]interface{}{}},
						),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "API endpoints accessible when logged in as admin\n"},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("protoapp.apis.cap", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("protoapp.apis.cap", "ApiRequests"),
		AST_ApiRequests(),
	)
}

func Texpr_B_Api() adlast.ATypeExpr[B_Api] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("protoapp.apis.cap", "B_Api"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[B_Api](te)
}

func AST_B_Api() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"B_Api",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"c",
						"c",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.capability",
									"HttpPost",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.cap",
											"B_ApiToken",
										),
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.cap",
											"C_ApiResp",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{"path": "/c"},
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"accessTokenApi",
						"accessTokenApi",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.capability",
									"CapabilityApi",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.cap",
											"B_ApiToken",
										),
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"common.http",
											"Unit",
										),
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.cap",
											"C_Api",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{"service": map[string]interface{}{}},
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("protoapp.apis.cap", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("protoapp.apis.cap", "B_Api"),
		AST_B_Api(),
	)
}

func Texpr_B_ApiResp() adlast.ATypeExpr[B_ApiResp] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("protoapp.apis.cap", "B_ApiResp"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[B_ApiResp](te)
}

func AST_B_ApiResp() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"B_ApiResp",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"token",
						"token",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("protoapp.apis.cap", "B_ApiTokenMarker"): map[string]interface{}{}},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("protoapp.apis.cap", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("protoapp.apis.cap", "B_ApiResp"),
		AST_B_ApiResp(),
	)
}

func Texpr_B_ApiToken() adlast.ATypeExpr[B_ApiToken] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("protoapp.apis.cap", "B_ApiToken"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[B_ApiToken](te)
}

func AST_B_ApiToken() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"B_ApiToken",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_type_(
			adlast.MakeAll_TypeDef(
				[]adlast.Ident{},
				adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_primitive(
						"String",
					),
					[]adlast.TypeExpr{},
				),
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("protoapp.apis.cap", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("protoapp.apis.cap", "B_ApiToken"),
		AST_B_ApiToken(),
	)
}

func Texpr_B_ApiTokenMarker() adlast.ATypeExpr[B_ApiTokenMarker] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("protoapp.apis.cap", "B_ApiTokenMarker"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[B_ApiTokenMarker](te)
}

func AST_B_ApiTokenMarker() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"B_ApiTokenMarker",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_type_(
			adlast.MakeAll_TypeDef(
				[]adlast.Ident{},
				adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_reference(
						adlast.MakeAll_ScopedName(
							"common.capability",
							"CapabilityToken",
						),
					),
					[]adlast.TypeExpr{
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"protoapp.apis.cap",
									"B_ApiToken",
								),
							),
							[]adlast.TypeExpr{},
						),
					},
				),
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("protoapp.apis.cap", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("protoapp.apis.cap", "B_ApiTokenMarker"),
		AST_B_ApiTokenMarker(),
	)
}

func Texpr_C_Api() adlast.ATypeExpr[C_Api] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("protoapp.apis.cap", "C_Api"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[C_Api](te)
}

func AST_C_Api() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"C_Api",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"hello",
						"hello",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.capability",
									"HttpPost",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.cap",
											"C_ApiToken",
										),
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_primitive(
										"String",
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{"path": "/hello"},
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("protoapp.apis.cap", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("protoapp.apis.cap", "C_Api"),
		AST_C_Api(),
	)
}

func Texpr_C_ApiResp() adlast.ATypeExpr[C_ApiResp] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("protoapp.apis.cap", "C_ApiResp"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[C_ApiResp](te)
}

func AST_C_ApiResp() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"C_ApiResp",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"token",
						"token",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("protoapp.apis.cap", "C_ApiTokenMarker"): map[string]interface{}{}},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("protoapp.apis.cap", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("protoapp.apis.cap", "C_ApiResp"),
		AST_C_ApiResp(),
	)
}

func Texpr_C_ApiToken() adlast.ATypeExpr[C_ApiToken] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("protoapp.apis.cap", "C_ApiToken"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[C_ApiToken](te)
}

func AST_C_ApiToken() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"C_ApiToken",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_type_(
			adlast.MakeAll_TypeDef(
				[]adlast.Ident{},
				adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_primitive(
						"String",
					),
					[]adlast.TypeExpr{},
				),
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("protoapp.apis.cap", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("protoapp.apis.cap", "C_ApiToken"),
		AST_C_ApiToken(),
	)
}

func Texpr_C_ApiTokenMarker() adlast.ATypeExpr[C_ApiTokenMarker] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("protoapp.apis.cap", "C_ApiTokenMarker"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[C_ApiTokenMarker](te)
}

func AST_C_ApiTokenMarker() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"C_ApiTokenMarker",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_type_(
			adlast.MakeAll_TypeDef(
				[]adlast.Ident{},
				adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_reference(
						adlast.MakeAll_ScopedName(
							"common.capability",
							"CapabilityToken",
						),
					),
					[]adlast.TypeExpr{
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"protoapp.apis.cap",
									"C_ApiToken",
								),
							),
							[]adlast.TypeExpr{},
						),
					},
				),
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("protoapp.apis.cap", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("protoapp.apis.cap", "C_ApiTokenMarker"),
		AST_C_ApiTokenMarker(),
	)
}

func Texpr_Capability() adlast.ATypeExpr[Capability] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("protoapp.apis.cap", "Capability"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[Capability](te)
}

func AST_Capability() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"Capability",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"user_id",
						"user_id",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"roles",
						"roles",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Vector",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_primitive(
										"String",
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("protoapp.apis.cap", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("protoapp.apis.cap", "Capability"),
		AST_Capability(),
	)
}

func Texpr_RefreshApiRequests() adlast.ATypeExpr[RefreshApiRequests] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("protoapp.apis.cap", "RefreshApiRequests"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[RefreshApiRequests](te)
}

func AST_RefreshApiRequests() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"RefreshApiRequests",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"refresh",
						"refresh",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.capability",
									"HttpPost",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.types",
											"CapRefreshReq",
										),
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.types",
											"RefreshResp",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{"path": "/refresh"},
						),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "Get a refreshed access token\n\nIf the refresh token is not provided in the request body, then it will\nbe read from the refreshToken cookie in the request.\n"},
					),
					adlast.MakeAll_Field(
						"accessTokenApi",
						"accessTokenApi",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.capability",
									"CapabilityApi",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.types",
											"AccessToken",
										),
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.cap",
											"Capability",
										),
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.cap",
											"AccessApiRequests",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{"name": "Logged-in API", "service": map[string]interface{}{}},
						),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "API endpoints accessible when logged in\n"},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("protoapp.apis.cap", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("protoapp.apis.cap", "RefreshApiRequests"),
		AST_RefreshApiRequests(),
	)
}

func Texpr_UserApiRequests() adlast.ATypeExpr[UserApiRequests] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("protoapp.apis.cap", "UserApiRequests"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[UserApiRequests](te)
}

func AST_UserApiRequests() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"UserApiRequests",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"create_user",
						"create_user",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.capability",
									"HttpPost",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.types",
											"UserDetails",
										),
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.db",
											"AppUserId",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{"path": "/users/create"},
						),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "Create a new user\n"},
					),
					adlast.MakeAll_Field(
						"update_user",
						"update_user",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.capability",
									"HttpPost",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.types",
											"WithId",
										),
									),
									[]adlast.TypeExpr{
										adlast.MakeAll_TypeExpr(
											adlast.Make_TypeRef_reference(
												adlast.MakeAll_ScopedName(
													"protoapp.db",
													"AppUserId",
												),
											),
											[]adlast.TypeExpr{},
										),
										adlast.MakeAll_TypeExpr(
											adlast.Make_TypeRef_reference(
												adlast.MakeAll_ScopedName(
													"protoapp.apis.types",
													"UserDetails",
												),
											),
											[]adlast.TypeExpr{},
										),
									},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"common.http",
											"Unit",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{"path": "/users/update"},
						),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "Update a user\n"},
					),
					adlast.MakeAll_Field(
						"query_users",
						"query_users",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.capability",
									"HttpPost",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.types",
											"QueryUsersReq",
										),
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.types",
											"Paginated",
										),
									),
									[]adlast.TypeExpr{
										adlast.MakeAll_TypeExpr(
											adlast.Make_TypeRef_reference(
												adlast.MakeAll_ScopedName(
													"protoapp.apis.types",
													"UserWithId",
												),
											),
											[]adlast.TypeExpr{},
										),
									},
								),
							},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{"path": "/users/query"},
						),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "Query users\n"},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("protoapp.apis.cap", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("protoapp.apis.cap", "UserApiRequests"),
		AST_UserApiRequests(),
	)
}
