// Code generated by goadlc v3 - DO NOT EDIT.
package captest

import (
	"fmt"
	"github.com/adl-lang/goadl_common/common/capability"
	"github.com/adl-lang/goadl_common/common/http"
	"github.com/adl-lang/goadl_rt/v3/sys/adlast"
)

type AB struct {
	_AB
}

type _AB struct {
	A string `json:"a"`
	B string `json:"b"`
}

func MakeAll_AB(
	a string,
	b string,
) AB {
	return AB{
		_AB{
			A: a,
			B: b,
		},
	}
}

func Make_AB(
	a string,
	b string,
) AB {
	ret := AB{
		_AB{
			A: a,
			B: b,
		},
	}
	return ret
}

type A_Api struct {
	_A_Api
}

type _A_Api struct {
	B              capability.HttpPost[AB, B_ApiResp]                     `json:"b"`
	A2             capability.HttpGet[B_ApiResp]                          `json:"a2"`
	AccessTokenApi capability.CapabilityApi[B_ApiToken, http.Unit, B_Api] `json:"accessTokenApi"`
}

func MakeAll_A_Api(
	b capability.HttpPost[AB, B_ApiResp],
	a2 capability.HttpGet[B_ApiResp],
	accesstokenapi capability.CapabilityApi[B_ApiToken, http.Unit, B_Api],
) A_Api {
	return A_Api{
		_A_Api{
			B:              b,
			A2:             a2,
			AccessTokenApi: accesstokenapi,
		},
	}
}

func Make_A_Api() A_Api {
	ret := A_Api{
		_A_Api{
			B:              ((*A_Api)(nil)).Default_b(),
			A2:             ((*A_Api)(nil)).Default_a2(),
			AccessTokenApi: ((*A_Api)(nil)).Default_accessTokenApi(),
		},
	}
	return ret
}

func (*A_Api) Default_b() capability.HttpPost[AB, B_ApiResp] {
	return capability.MakeAll_HttpPost[AB, B_ApiResp](
		"/b",
		nil,
		adlast.Make_ATypeExpr[AB](adlast.MakeAll_TypeExpr(
			adlast.Make_TypeRef_reference(
				adlast.MakeAll_ScopedName(
					"protoapp.apis.captest",
					"AB",
				),
			),
			[]adlast.TypeExpr{},
		)),
		adlast.Make_ATypeExpr[B_ApiResp](adlast.MakeAll_TypeExpr(
			adlast.Make_TypeRef_reference(
				adlast.MakeAll_ScopedName(
					"protoapp.apis.captest",
					"B_ApiResp",
				),
			),
			[]adlast.TypeExpr{},
		)),
	)
}
func (*A_Api) Default_a2() capability.HttpGet[B_ApiResp] {
	return capability.MakeAll_HttpGet[B_ApiResp](
		"/a2",
		nil,
		adlast.Make_ATypeExpr[B_ApiResp](adlast.MakeAll_TypeExpr(
			adlast.Make_TypeRef_reference(
				adlast.MakeAll_ScopedName(
					"protoapp.apis.captest",
					"B_ApiResp",
				),
			),
			[]adlast.TypeExpr{},
		)),
	)
}
func (*A_Api) Default_accessTokenApi() capability.CapabilityApi[B_ApiToken, http.Unit, B_Api] {
	return capability.MakeAll_CapabilityApi[B_ApiToken, http.Unit, B_Api](
		adlast.Make_ATypeExpr[B_ApiToken](adlast.MakeAll_TypeExpr(
			adlast.Make_TypeRef_reference(
				adlast.MakeAll_ScopedName(
					"protoapp.apis.captest",
					"B_ApiToken",
				),
			),
			[]adlast.TypeExpr{},
		)),
		adlast.Make_ATypeExpr[http.Unit](adlast.MakeAll_TypeExpr(
			adlast.Make_TypeRef_reference(
				adlast.MakeAll_ScopedName(
					"common.http",
					"Unit",
				),
			),
			[]adlast.TypeExpr{},
		)),
		"",
		MakeAll_B_Api(
			capability.MakeAll_HttpPost[B_ApiToken, C_ApiResp](
				"/c",
				nil,
				adlast.Make_ATypeExpr[B_ApiToken](adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_reference(
						adlast.MakeAll_ScopedName(
							"protoapp.apis.captest",
							"B_ApiToken",
						),
					),
					[]adlast.TypeExpr{},
				)),
				adlast.Make_ATypeExpr[C_ApiResp](adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_reference(
						adlast.MakeAll_ScopedName(
							"protoapp.apis.captest",
							"C_ApiResp",
						),
					),
					[]adlast.TypeExpr{},
				)),
			),
			capability.MakeAll_CapabilityApi[C_ApiToken, http.Unit, C_Api](
				adlast.Make_ATypeExpr[C_ApiToken](adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_reference(
						adlast.MakeAll_ScopedName(
							"protoapp.apis.captest",
							"C_ApiToken",
						),
					),
					[]adlast.TypeExpr{},
				)),
				adlast.Make_ATypeExpr[http.Unit](adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_reference(
						adlast.MakeAll_ScopedName(
							"common.http",
							"Unit",
						),
					),
					[]adlast.TypeExpr{},
				)),
				"",
				MakeAll_C_Api(
					capability.MakeAll_HttpPost[C_ApiToken, string](
						"/hello",
						nil,
						adlast.Make_ATypeExpr[C_ApiToken](adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"protoapp.apis.captest",
									"C_ApiToken",
								),
							),
							[]adlast.TypeExpr{},
						)),
						adlast.Make_ATypeExpr[string](adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						)),
					),
				),
				"",
				capability.Make_DeliveryMethod_header(
					"c_cookie",
				),
			),
		),
		"",
		capability.Make_DeliveryMethod_header(
			"b_cookie",
		),
	)
}

type A_ApiResp struct {
	Branch A_ApiRespBranch
}

type A_ApiRespBranch interface {
	isA_ApiRespBranch()
}

func (*A_ApiResp) MakeNewBranch(key string) (any, error) {
	switch key {
	case "token":
		return &_A_ApiResp_Token{}, nil
	}
	return nil, fmt.Errorf("unknown branch is : %s", key)
}

type _A_ApiResp_Token struct {
	V string `branch:"token"`
}

func (_A_ApiResp_Token) isA_ApiRespBranch() {}

func Make_A_ApiResp_token(v string) A_ApiResp {
	return A_ApiResp{
		_A_ApiResp_Token{v},
	}
}

func (un A_ApiResp) Cast_token() (string, bool) {
	br, ok := un.Branch.(_A_ApiResp_Token)
	return br.V, ok
}

func Handle_A_ApiResp[T any](
	_in A_ApiResp,
	token func(token string) T,
	_default func() T,
) T {
	switch _b := _in.Branch.(type) {
	case _A_ApiResp_Token:
		if token != nil {
			return token(_b.V)
		}
	}
	if _default != nil {
		return _default()
	}
	panic("unhandled branch in : A_ApiResp")
}

func HandleWithErr_A_ApiResp[T any](
	_in A_ApiResp,
	token func(token string) (T, error),
	_default func() (T, error),
) (T, error) {
	switch _b := _in.Branch.(type) {
	case _A_ApiResp_Token:
		if token != nil {
			return token(_b.V)
		}
	}
	if _default != nil {
		return _default()
	}
	panic("unhandled branch in : A_ApiResp")
}

type A_ApiToken = string

type A_ApiTokenMarker = capability.CapabilityToken[A_ApiToken]

type ApiRequests struct {
	_ApiRequests
}

type _ApiRequests struct {
	Get_list       capability.HttpPost[http.Unit, []A_ApiToken]           `json:"get_list"`
	Pick_token     UserInput[[]A_ApiToken, A_ApiToken]                    `json:"pick_token"`
	A              capability.HttpPost[http.Unit, A_ApiResp]              `json:"a"`
	AccessTokenApi capability.CapabilityApi[A_ApiToken, http.Unit, A_Api] `json:"accessTokenApi"`
	My_api         MyApi                                                  `json:"my_api"`
}

func MakeAll_ApiRequests(
	get_list capability.HttpPost[http.Unit, []A_ApiToken],
	pick_token UserInput[[]A_ApiToken, A_ApiToken],
	a capability.HttpPost[http.Unit, A_ApiResp],
	accesstokenapi capability.CapabilityApi[A_ApiToken, http.Unit, A_Api],
	my_api MyApi,
) ApiRequests {
	return ApiRequests{
		_ApiRequests{
			Get_list:       get_list,
			Pick_token:     pick_token,
			A:              a,
			AccessTokenApi: accesstokenapi,
			My_api:         my_api,
		},
	}
}

func Make_ApiRequests() ApiRequests {
	ret := ApiRequests{
		_ApiRequests{
			Get_list:       ((*ApiRequests)(nil)).Default_get_list(),
			Pick_token:     ((*ApiRequests)(nil)).Default_pick_token(),
			A:              ((*ApiRequests)(nil)).Default_a(),
			AccessTokenApi: ((*ApiRequests)(nil)).Default_accessTokenApi(),
			My_api:         ((*ApiRequests)(nil)).Default_my_api(),
		},
	}
	return ret
}

func (*ApiRequests) Default_get_list() capability.HttpPost[http.Unit, []A_ApiToken] {
	return capability.MakeAll_HttpPost[http.Unit, []A_ApiToken](
		"/getlist",
		nil,
		adlast.Make_ATypeExpr[http.Unit](adlast.MakeAll_TypeExpr(
			adlast.Make_TypeRef_reference(
				adlast.MakeAll_ScopedName(
					"common.http",
					"Unit",
				),
			),
			[]adlast.TypeExpr{},
		)),
		adlast.Make_ATypeExpr[[]A_ApiToken](adlast.MakeAll_TypeExpr(
			adlast.Make_TypeRef_primitive(
				"Vector",
			),
			[]adlast.TypeExpr{
				adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_reference(
						adlast.MakeAll_ScopedName(
							"protoapp.apis.captest",
							"A_ApiToken",
						),
					),
					[]adlast.TypeExpr{},
				),
			},
		)),
	)
}
func (*ApiRequests) Default_pick_token() UserInput[[]A_ApiToken, A_ApiToken] {
	return MakeAll_UserInput[[]A_ApiToken, A_ApiToken](
		adlast.Make_ATypeExpr[[]A_ApiToken](adlast.MakeAll_TypeExpr(
			adlast.Make_TypeRef_primitive(
				"Vector",
			),
			[]adlast.TypeExpr{
				adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_reference(
						adlast.MakeAll_ScopedName(
							"protoapp.apis.captest",
							"A_ApiToken",
						),
					),
					[]adlast.TypeExpr{},
				),
			},
		)),
		adlast.Make_ATypeExpr[A_ApiToken](adlast.MakeAll_TypeExpr(
			adlast.Make_TypeRef_reference(
				adlast.MakeAll_ScopedName(
					"protoapp.apis.captest",
					"A_ApiToken",
				),
			),
			[]adlast.TypeExpr{},
		)),
	)
}
func (*ApiRequests) Default_a() capability.HttpPost[http.Unit, A_ApiResp] {
	return capability.MakeAll_HttpPost[http.Unit, A_ApiResp](
		"/a",
		nil,
		adlast.Make_ATypeExpr[http.Unit](adlast.MakeAll_TypeExpr(
			adlast.Make_TypeRef_reference(
				adlast.MakeAll_ScopedName(
					"common.http",
					"Unit",
				),
			),
			[]adlast.TypeExpr{},
		)),
		adlast.Make_ATypeExpr[A_ApiResp](adlast.MakeAll_TypeExpr(
			adlast.Make_TypeRef_reference(
				adlast.MakeAll_ScopedName(
					"protoapp.apis.captest",
					"A_ApiResp",
				),
			),
			[]adlast.TypeExpr{},
		)),
	)
}
func (*ApiRequests) Default_accessTokenApi() capability.CapabilityApi[A_ApiToken, http.Unit, A_Api] {
	return capability.MakeAll_CapabilityApi[A_ApiToken, http.Unit, A_Api](
		adlast.Make_ATypeExpr[A_ApiToken](adlast.MakeAll_TypeExpr(
			adlast.Make_TypeRef_reference(
				adlast.MakeAll_ScopedName(
					"protoapp.apis.captest",
					"A_ApiToken",
				),
			),
			[]adlast.TypeExpr{},
		)),
		adlast.Make_ATypeExpr[http.Unit](adlast.MakeAll_TypeExpr(
			adlast.Make_TypeRef_reference(
				adlast.MakeAll_ScopedName(
					"common.http",
					"Unit",
				),
			),
			[]adlast.TypeExpr{},
		)),
		"",
		MakeAll_A_Api(
			capability.MakeAll_HttpPost[AB, B_ApiResp](
				"/b",
				nil,
				adlast.Make_ATypeExpr[AB](adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_reference(
						adlast.MakeAll_ScopedName(
							"protoapp.apis.captest",
							"AB",
						),
					),
					[]adlast.TypeExpr{},
				)),
				adlast.Make_ATypeExpr[B_ApiResp](adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_reference(
						adlast.MakeAll_ScopedName(
							"protoapp.apis.captest",
							"B_ApiResp",
						),
					),
					[]adlast.TypeExpr{},
				)),
			),
			capability.MakeAll_HttpGet[B_ApiResp](
				"/a2",
				nil,
				adlast.Make_ATypeExpr[B_ApiResp](adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_reference(
						adlast.MakeAll_ScopedName(
							"protoapp.apis.captest",
							"B_ApiResp",
						),
					),
					[]adlast.TypeExpr{},
				)),
			),
			capability.MakeAll_CapabilityApi[B_ApiToken, http.Unit, B_Api](
				adlast.Make_ATypeExpr[B_ApiToken](adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_reference(
						adlast.MakeAll_ScopedName(
							"protoapp.apis.captest",
							"B_ApiToken",
						),
					),
					[]adlast.TypeExpr{},
				)),
				adlast.Make_ATypeExpr[http.Unit](adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_reference(
						adlast.MakeAll_ScopedName(
							"common.http",
							"Unit",
						),
					),
					[]adlast.TypeExpr{},
				)),
				"",
				MakeAll_B_Api(
					capability.MakeAll_HttpPost[B_ApiToken, C_ApiResp](
						"/c",
						nil,
						adlast.Make_ATypeExpr[B_ApiToken](adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"protoapp.apis.captest",
									"B_ApiToken",
								),
							),
							[]adlast.TypeExpr{},
						)),
						adlast.Make_ATypeExpr[C_ApiResp](adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"protoapp.apis.captest",
									"C_ApiResp",
								),
							),
							[]adlast.TypeExpr{},
						)),
					),
					capability.MakeAll_CapabilityApi[C_ApiToken, http.Unit, C_Api](
						adlast.Make_ATypeExpr[C_ApiToken](adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"protoapp.apis.captest",
									"C_ApiToken",
								),
							),
							[]adlast.TypeExpr{},
						)),
						adlast.Make_ATypeExpr[http.Unit](adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.http",
									"Unit",
								),
							),
							[]adlast.TypeExpr{},
						)),
						"",
						MakeAll_C_Api(
							capability.MakeAll_HttpPost[C_ApiToken, string](
								"/hello",
								nil,
								adlast.Make_ATypeExpr[C_ApiToken](adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.captest",
											"C_ApiToken",
										),
									),
									[]adlast.TypeExpr{},
								)),
								adlast.Make_ATypeExpr[string](adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_primitive(
										"String",
									),
									[]adlast.TypeExpr{},
								)),
							),
						),
						"",
						capability.Make_DeliveryMethod_header(
							"c_cookie",
						),
					),
				),
				"",
				capability.Make_DeliveryMethod_header(
					"b_cookie",
				),
			),
		),
		"",
		capability.Make_DeliveryMethod_header(
			"a_cookie",
		),
	)
}
func (*ApiRequests) Default_my_api() MyApi {
	return MakeAll_MyApi(
		capability.MakeAll_HttpPost[http.Unit, A_ApiResp](
			"/aa",
			nil,
			adlast.Make_ATypeExpr[http.Unit](adlast.MakeAll_TypeExpr(
				adlast.Make_TypeRef_reference(
					adlast.MakeAll_ScopedName(
						"common.http",
						"Unit",
					),
				),
				[]adlast.TypeExpr{},
			)),
			adlast.Make_ATypeExpr[A_ApiResp](adlast.MakeAll_TypeExpr(
				adlast.Make_TypeRef_reference(
					adlast.MakeAll_ScopedName(
						"protoapp.apis.captest",
						"A_ApiResp",
					),
				),
				[]adlast.TypeExpr{},
			)),
		),
	)
}

type B_Api struct {
	_B_Api
}

type _B_Api struct {
	C              capability.HttpPost[B_ApiToken, C_ApiResp]             `json:"c"`
	AccessTokenApi capability.CapabilityApi[C_ApiToken, http.Unit, C_Api] `json:"accessTokenApi"`
}

func MakeAll_B_Api(
	c capability.HttpPost[B_ApiToken, C_ApiResp],
	accesstokenapi capability.CapabilityApi[C_ApiToken, http.Unit, C_Api],
) B_Api {
	return B_Api{
		_B_Api{
			C:              c,
			AccessTokenApi: accesstokenapi,
		},
	}
}

func Make_B_Api() B_Api {
	ret := B_Api{
		_B_Api{
			C:              ((*B_Api)(nil)).Default_c(),
			AccessTokenApi: ((*B_Api)(nil)).Default_accessTokenApi(),
		},
	}
	return ret
}

func (*B_Api) Default_c() capability.HttpPost[B_ApiToken, C_ApiResp] {
	return capability.MakeAll_HttpPost[B_ApiToken, C_ApiResp](
		"/c",
		nil,
		adlast.Make_ATypeExpr[B_ApiToken](adlast.MakeAll_TypeExpr(
			adlast.Make_TypeRef_reference(
				adlast.MakeAll_ScopedName(
					"protoapp.apis.captest",
					"B_ApiToken",
				),
			),
			[]adlast.TypeExpr{},
		)),
		adlast.Make_ATypeExpr[C_ApiResp](adlast.MakeAll_TypeExpr(
			adlast.Make_TypeRef_reference(
				adlast.MakeAll_ScopedName(
					"protoapp.apis.captest",
					"C_ApiResp",
				),
			),
			[]adlast.TypeExpr{},
		)),
	)
}
func (*B_Api) Default_accessTokenApi() capability.CapabilityApi[C_ApiToken, http.Unit, C_Api] {
	return capability.MakeAll_CapabilityApi[C_ApiToken, http.Unit, C_Api](
		adlast.Make_ATypeExpr[C_ApiToken](adlast.MakeAll_TypeExpr(
			adlast.Make_TypeRef_reference(
				adlast.MakeAll_ScopedName(
					"protoapp.apis.captest",
					"C_ApiToken",
				),
			),
			[]adlast.TypeExpr{},
		)),
		adlast.Make_ATypeExpr[http.Unit](adlast.MakeAll_TypeExpr(
			adlast.Make_TypeRef_reference(
				adlast.MakeAll_ScopedName(
					"common.http",
					"Unit",
				),
			),
			[]adlast.TypeExpr{},
		)),
		"",
		MakeAll_C_Api(
			capability.MakeAll_HttpPost[C_ApiToken, string](
				"/hello",
				nil,
				adlast.Make_ATypeExpr[C_ApiToken](adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_reference(
						adlast.MakeAll_ScopedName(
							"protoapp.apis.captest",
							"C_ApiToken",
						),
					),
					[]adlast.TypeExpr{},
				)),
				adlast.Make_ATypeExpr[string](adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_primitive(
						"String",
					),
					[]adlast.TypeExpr{},
				)),
			),
		),
		"",
		capability.Make_DeliveryMethod_header(
			"c_cookie",
		),
	)
}

type B_ApiResp struct {
	Branch B_ApiRespBranch
}

type B_ApiRespBranch interface {
	isB_ApiRespBranch()
}

func (*B_ApiResp) MakeNewBranch(key string) (any, error) {
	switch key {
	case "token":
		return &_B_ApiResp_Token{}, nil
	}
	return nil, fmt.Errorf("unknown branch is : %s", key)
}

type _B_ApiResp_Token struct {
	V string `branch:"token"`
}

func (_B_ApiResp_Token) isB_ApiRespBranch() {}

func Make_B_ApiResp_token(v string) B_ApiResp {
	return B_ApiResp{
		_B_ApiResp_Token{v},
	}
}

func (un B_ApiResp) Cast_token() (string, bool) {
	br, ok := un.Branch.(_B_ApiResp_Token)
	return br.V, ok
}

func Handle_B_ApiResp[T any](
	_in B_ApiResp,
	token func(token string) T,
	_default func() T,
) T {
	switch _b := _in.Branch.(type) {
	case _B_ApiResp_Token:
		if token != nil {
			return token(_b.V)
		}
	}
	if _default != nil {
		return _default()
	}
	panic("unhandled branch in : B_ApiResp")
}

func HandleWithErr_B_ApiResp[T any](
	_in B_ApiResp,
	token func(token string) (T, error),
	_default func() (T, error),
) (T, error) {
	switch _b := _in.Branch.(type) {
	case _B_ApiResp_Token:
		if token != nil {
			return token(_b.V)
		}
	}
	if _default != nil {
		return _default()
	}
	panic("unhandled branch in : B_ApiResp")
}

type B_ApiToken = string

type B_ApiTokenMarker = capability.CapabilityToken[B_ApiToken]

type C_Api struct {
	_C_Api
}

type _C_Api struct {
	Hello capability.HttpPost[C_ApiToken, string] `json:"hello"`
}

func MakeAll_C_Api(
	hello capability.HttpPost[C_ApiToken, string],
) C_Api {
	return C_Api{
		_C_Api{
			Hello: hello,
		},
	}
}

func Make_C_Api() C_Api {
	ret := C_Api{
		_C_Api{
			Hello: ((*C_Api)(nil)).Default_hello(),
		},
	}
	return ret
}

func (*C_Api) Default_hello() capability.HttpPost[C_ApiToken, string] {
	return capability.MakeAll_HttpPost[C_ApiToken, string](
		"/hello",
		nil,
		adlast.Make_ATypeExpr[C_ApiToken](adlast.MakeAll_TypeExpr(
			adlast.Make_TypeRef_reference(
				adlast.MakeAll_ScopedName(
					"protoapp.apis.captest",
					"C_ApiToken",
				),
			),
			[]adlast.TypeExpr{},
		)),
		adlast.Make_ATypeExpr[string](adlast.MakeAll_TypeExpr(
			adlast.Make_TypeRef_primitive(
				"String",
			),
			[]adlast.TypeExpr{},
		)),
	)
}

type C_ApiResp struct {
	Branch C_ApiRespBranch
}

type C_ApiRespBranch interface {
	isC_ApiRespBranch()
}

func (*C_ApiResp) MakeNewBranch(key string) (any, error) {
	switch key {
	case "token":
		return &_C_ApiResp_Token{}, nil
	}
	return nil, fmt.Errorf("unknown branch is : %s", key)
}

type _C_ApiResp_Token struct {
	V string `branch:"token"`
}

func (_C_ApiResp_Token) isC_ApiRespBranch() {}

func Make_C_ApiResp_token(v string) C_ApiResp {
	return C_ApiResp{
		_C_ApiResp_Token{v},
	}
}

func (un C_ApiResp) Cast_token() (string, bool) {
	br, ok := un.Branch.(_C_ApiResp_Token)
	return br.V, ok
}

func Handle_C_ApiResp[T any](
	_in C_ApiResp,
	token func(token string) T,
	_default func() T,
) T {
	switch _b := _in.Branch.(type) {
	case _C_ApiResp_Token:
		if token != nil {
			return token(_b.V)
		}
	}
	if _default != nil {
		return _default()
	}
	panic("unhandled branch in : C_ApiResp")
}

func HandleWithErr_C_ApiResp[T any](
	_in C_ApiResp,
	token func(token string) (T, error),
	_default func() (T, error),
) (T, error) {
	switch _b := _in.Branch.(type) {
	case _C_ApiResp_Token:
		if token != nil {
			return token(_b.V)
		}
	}
	if _default != nil {
		return _default()
	}
	panic("unhandled branch in : C_ApiResp")
}

type C_ApiToken = string

type C_ApiTokenMarker = capability.CapabilityToken[C_ApiToken]

type List struct {
	Branch ListBranch
}

type ListBranch interface {
	isListBranch()
}

func (*List) MakeNewBranch(key string) (any, error) {
	switch key {
	case "list":
		return &_List_List{}, nil
	}
	return nil, fmt.Errorf("unknown branch is : %s", key)
}

type _List_List struct {
	V []A_ApiToken `branch:"list"`
}

func (_List_List) isListBranch() {}

func Make_List_list(v []A_ApiToken) List {
	return List{
		_List_List{v},
	}
}

func (un List) Cast_list() ([]A_ApiToken, bool) {
	br, ok := un.Branch.(_List_List)
	return br.V, ok
}

func Handle_List[T any](
	_in List,
	list func(list []A_ApiToken) T,
	_default func() T,
) T {
	switch _b := _in.Branch.(type) {
	case _List_List:
		if list != nil {
			return list(_b.V)
		}
	}
	if _default != nil {
		return _default()
	}
	panic("unhandled branch in : List")
}

func HandleWithErr_List[T any](
	_in List,
	list func(list []A_ApiToken) (T, error),
	_default func() (T, error),
) (T, error) {
	switch _b := _in.Branch.(type) {
	case _List_List:
		if list != nil {
			return list(_b.V)
		}
	}
	if _default != nil {
		return _default()
	}
	panic("unhandled branch in : List")
}

type MyApi struct {
	_MyApi
}

type _MyApi struct {
	A capability.HttpPost[http.Unit, A_ApiResp] `json:"a"`
}

func MakeAll_MyApi(
	a capability.HttpPost[http.Unit, A_ApiResp],
) MyApi {
	return MyApi{
		_MyApi{
			A: a,
		},
	}
}

func Make_MyApi() MyApi {
	ret := MyApi{
		_MyApi{
			A: ((*MyApi)(nil)).Default_a(),
		},
	}
	return ret
}

func (*MyApi) Default_a() capability.HttpPost[http.Unit, A_ApiResp] {
	return capability.MakeAll_HttpPost[http.Unit, A_ApiResp](
		"/aa",
		nil,
		adlast.Make_ATypeExpr[http.Unit](adlast.MakeAll_TypeExpr(
			adlast.Make_TypeRef_reference(
				adlast.MakeAll_ScopedName(
					"common.http",
					"Unit",
				),
			),
			[]adlast.TypeExpr{},
		)),
		adlast.Make_ATypeExpr[A_ApiResp](adlast.MakeAll_TypeExpr(
			adlast.Make_TypeRef_reference(
				adlast.MakeAll_ScopedName(
					"protoapp.apis.captest",
					"A_ApiResp",
				),
			),
			[]adlast.TypeExpr{},
		)),
	)
}

type UserInput[I any, O any] struct {
	_UserInput[I, O]
}

type _UserInput[I any, O any] struct {
	ReqType  adlast.ATypeExpr[I] `json:"reqType"`
	RespType adlast.ATypeExpr[O] `json:"respType"`
}

func MakeAll_UserInput[I any, O any](
	reqtype adlast.ATypeExpr[I],
	resptype adlast.ATypeExpr[O],
) UserInput[I, O] {
	return UserInput[I, O]{
		_UserInput[I, O]{
			ReqType:  reqtype,
			RespType: resptype,
		},
	}
}

// struct UserInput contains at least one TypeToken, not generating Make_ funcs
