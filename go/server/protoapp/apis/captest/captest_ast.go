// Code generated by goadlc v3 - DO NOT EDIT.
package captest

import (
	goadl "github.com/adl-lang/goadl_rt/v3"
	"github.com/adl-lang/goadl_rt/v3/customtypes"
	"github.com/adl-lang/goadl_rt/v3/sys/adlast"
	"github.com/adl-lang/goadl_rt/v3/sys/types"
)

func Texpr_AB() adlast.ATypeExpr[AB] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("protoapp.apis.captest", "AB"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[AB](te)
}

func AST_AB() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"AB",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"a",
						"a",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"b",
						"b",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("protoapp.apis.captest", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("protoapp.apis.captest", "AB"),
		AST_AB(),
	)
}

func Texpr_A_Api() adlast.ATypeExpr[A_Api] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("protoapp.apis.captest", "A_Api"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[A_Api](te)
}

func AST_A_Api() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"A_Api",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"b",
						"b",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.capability",
									"HttpPost",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.captest",
											"AB",
										),
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.captest",
											"B_ApiResp",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{"path": "/b"},
						),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "Post a AB and get a token to access b_api\n"},
					),
					adlast.MakeAll_Field(
						"a2",
						"a2",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.capability",
									"HttpGet",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.captest",
											"B_ApiResp",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{"path": "/a2"},
						),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "Get a get a token to access b_api\n"},
					),
					adlast.MakeAll_Field(
						"accessTokenApi",
						"accessTokenApi",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.capability",
									"CapabilityApi",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.captest",
											"B_ApiToken",
										),
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"common.http",
											"Unit",
										),
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.captest",
											"B_Api",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{"service": map[string]interface{}{}, "token_delivery": map[string]interface{}{"header": "b_cookie"}},
						),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "B api\n"},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("protoapp.apis.captest", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("protoapp.apis.captest", "A_Api"),
		AST_A_Api(),
	)
}

func Texpr_A_ApiResp() adlast.ATypeExpr[A_ApiResp] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("protoapp.apis.captest", "A_ApiResp"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[A_ApiResp](te)
}

func AST_A_ApiResp() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"A_ApiResp",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"token",
						"token",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("protoapp.apis.captest", "A_ApiTokenMarker"): map[string]interface{}{}},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("protoapp.apis.captest", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("protoapp.apis.captest", "A_ApiResp"),
		AST_A_ApiResp(),
	)
}

func Texpr_A_ApiToken() adlast.ATypeExpr[A_ApiToken] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("protoapp.apis.captest", "A_ApiToken"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[A_ApiToken](te)
}

func AST_A_ApiToken() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"A_ApiToken",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_type_(
			adlast.MakeAll_TypeDef(
				[]adlast.Ident{},
				adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_primitive(
						"String",
					),
					[]adlast.TypeExpr{},
				),
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("protoapp.apis.captest", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("protoapp.apis.captest", "A_ApiToken"),
		AST_A_ApiToken(),
	)
}

func Texpr_A_ApiTokenMarker() adlast.ATypeExpr[A_ApiTokenMarker] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("protoapp.apis.captest", "A_ApiTokenMarker"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[A_ApiTokenMarker](te)
}

func AST_A_ApiTokenMarker() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"A_ApiTokenMarker",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_type_(
			adlast.MakeAll_TypeDef(
				[]adlast.Ident{},
				adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_reference(
						adlast.MakeAll_ScopedName(
							"common.capability",
							"CapabilityToken",
						),
					),
					[]adlast.TypeExpr{
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"protoapp.apis.captest",
									"A_ApiToken",
								),
							),
							[]adlast.TypeExpr{},
						),
					},
				),
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("protoapp.apis.captest", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("protoapp.apis.captest", "A_ApiTokenMarker"),
		AST_A_ApiTokenMarker(),
	)
}

func Texpr_ApiRequests() adlast.ATypeExpr[ApiRequests] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("protoapp.apis.captest", "ApiRequests"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[ApiRequests](te)
}

func AST_ApiRequests() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"ApiRequests",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"a",
						"a",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.capability",
									"HttpPost",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"common.http",
											"Unit",
										),
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.captest",
											"A_ApiResp",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{"path": "/a"},
						),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "Post a unit and get a token to access a_api\n"},
					),
					adlast.MakeAll_Field(
						"accessTokenApi",
						"accessTokenApi",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.capability",
									"CapabilityApi",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.captest",
											"A_ApiToken",
										),
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"common.http",
											"Unit",
										),
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.captest",
											"A_Api",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{"service": map[string]interface{}{}, "token_delivery": map[string]interface{}{"header": "a_cookie"}},
						),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "A_api\n"},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("protoapp.apis.captest", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("protoapp.apis.captest", "ApiRequests"),
		AST_ApiRequests(),
	)
}

func Texpr_B_Api() adlast.ATypeExpr[B_Api] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("protoapp.apis.captest", "B_Api"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[B_Api](te)
}

func AST_B_Api() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"B_Api",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"c",
						"c",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.capability",
									"HttpPost",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.captest",
											"B_ApiToken",
										),
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.captest",
											"C_ApiResp",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{"path": "/c"},
						),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "Post a B_ApiToken and get a token to access c_api\n"},
					),
					adlast.MakeAll_Field(
						"accessTokenApi",
						"accessTokenApi",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.capability",
									"CapabilityApi",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.captest",
											"C_ApiToken",
										),
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"common.http",
											"Unit",
										),
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.captest",
											"C_Api",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{"service": map[string]interface{}{}, "token_delivery": map[string]interface{}{"header": "c_cookie"}},
						),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "C api\n"},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("protoapp.apis.captest", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("protoapp.apis.captest", "B_Api"),
		AST_B_Api(),
	)
}

func Texpr_B_ApiResp() adlast.ATypeExpr[B_ApiResp] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("protoapp.apis.captest", "B_ApiResp"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[B_ApiResp](te)
}

func AST_B_ApiResp() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"B_ApiResp",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"token",
						"token",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("protoapp.apis.captest", "B_ApiTokenMarker"): map[string]interface{}{}},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("protoapp.apis.captest", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("protoapp.apis.captest", "B_ApiResp"),
		AST_B_ApiResp(),
	)
}

func Texpr_B_ApiToken() adlast.ATypeExpr[B_ApiToken] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("protoapp.apis.captest", "B_ApiToken"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[B_ApiToken](te)
}

func AST_B_ApiToken() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"B_ApiToken",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_type_(
			adlast.MakeAll_TypeDef(
				[]adlast.Ident{},
				adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_primitive(
						"String",
					),
					[]adlast.TypeExpr{},
				),
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("protoapp.apis.captest", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("protoapp.apis.captest", "B_ApiToken"),
		AST_B_ApiToken(),
	)
}

func Texpr_B_ApiTokenMarker() adlast.ATypeExpr[B_ApiTokenMarker] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("protoapp.apis.captest", "B_ApiTokenMarker"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[B_ApiTokenMarker](te)
}

func AST_B_ApiTokenMarker() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"B_ApiTokenMarker",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_type_(
			adlast.MakeAll_TypeDef(
				[]adlast.Ident{},
				adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_reference(
						adlast.MakeAll_ScopedName(
							"common.capability",
							"CapabilityToken",
						),
					),
					[]adlast.TypeExpr{
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"protoapp.apis.captest",
									"B_ApiToken",
								),
							),
							[]adlast.TypeExpr{},
						),
					},
				),
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("protoapp.apis.captest", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("protoapp.apis.captest", "B_ApiTokenMarker"),
		AST_B_ApiTokenMarker(),
	)
}

func Texpr_C_Api() adlast.ATypeExpr[C_Api] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("protoapp.apis.captest", "C_Api"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[C_Api](te)
}

func AST_C_Api() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"C_Api",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"hello",
						"hello",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.capability",
									"HttpPost",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.captest",
											"C_ApiToken",
										),
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_primitive(
										"String",
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{"path": "/hello"},
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("protoapp.apis.captest", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("protoapp.apis.captest", "C_Api"),
		AST_C_Api(),
	)
}

func Texpr_C_ApiResp() adlast.ATypeExpr[C_ApiResp] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("protoapp.apis.captest", "C_ApiResp"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[C_ApiResp](te)
}

func AST_C_ApiResp() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"C_ApiResp",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"token",
						"token",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("protoapp.apis.captest", "C_ApiTokenMarker"): map[string]interface{}{}},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("protoapp.apis.captest", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("protoapp.apis.captest", "C_ApiResp"),
		AST_C_ApiResp(),
	)
}

func Texpr_C_ApiToken() adlast.ATypeExpr[C_ApiToken] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("protoapp.apis.captest", "C_ApiToken"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[C_ApiToken](te)
}

func AST_C_ApiToken() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"C_ApiToken",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_type_(
			adlast.MakeAll_TypeDef(
				[]adlast.Ident{},
				adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_primitive(
						"String",
					),
					[]adlast.TypeExpr{},
				),
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("protoapp.apis.captest", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("protoapp.apis.captest", "C_ApiToken"),
		AST_C_ApiToken(),
	)
}

func Texpr_C_ApiTokenMarker() adlast.ATypeExpr[C_ApiTokenMarker] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("protoapp.apis.captest", "C_ApiTokenMarker"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[C_ApiTokenMarker](te)
}

func AST_C_ApiTokenMarker() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"C_ApiTokenMarker",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_type_(
			adlast.MakeAll_TypeDef(
				[]adlast.Ident{},
				adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_reference(
						adlast.MakeAll_ScopedName(
							"common.capability",
							"CapabilityToken",
						),
					),
					[]adlast.TypeExpr{
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"protoapp.apis.captest",
									"C_ApiToken",
								),
							),
							[]adlast.TypeExpr{},
						),
					},
				),
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("protoapp.apis.captest", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("protoapp.apis.captest", "C_ApiTokenMarker"),
		AST_C_ApiTokenMarker(),
	)
}
