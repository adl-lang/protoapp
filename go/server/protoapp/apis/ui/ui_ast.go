// Code generated by goadlc v3 - DO NOT EDIT.
package ui

import (
	goadl "github.com/adl-lang/goadl_rt/v3"
	"github.com/adl-lang/goadl_rt/v3/customtypes"
	"github.com/adl-lang/goadl_rt/v3/sys/adlast"
	"github.com/adl-lang/goadl_rt/v3/sys/types"
)

func Texpr_ApiRequests() adlast.ATypeExpr[ApiRequests] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("protoapp.apis.ui", "ApiRequests"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[ApiRequests](te)
}

func AST_ApiRequests() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"ApiRequests",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"healthy",
						"healthy",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.http",
									"HttpGet",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"common.http",
											"Unit",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{"path": "/", "security": "public"},
						),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "AWS default compatible health check\n"},
					),
					adlast.MakeAll_Field(
						"ping",
						"ping",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.http",
									"HttpPost",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"common.http",
											"Unit",
										),
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"common.http",
											"Unit",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{"path": "/ping", "security": "public"},
						),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "Test the server is live\n"},
					),
					adlast.MakeAll_Field(
						"login",
						"login",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.http",
									"HttpPost",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.types",
											"LoginReq",
										),
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.types",
											"LoginResp",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{"path": "/login", "security": "public"},
						),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "Login a user\n\nThe response will set an httpOnly cookie containing the refresh token\n"},
					),
					adlast.MakeAll_Field(
						"refresh",
						"refresh",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.http",
									"HttpPost",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.types",
											"RefreshReq",
										),
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.types",
											"RefreshResp",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{"path": "/refresh", "security": "public"},
						),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "Get a refreshed access token\n\nIf the refresh token is not provided in the request body, then it will\nbe read from the refrestToken cookie in the request.\n"},
					),
					adlast.MakeAll_Field(
						"logout",
						"logout",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.http",
									"HttpPost",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"common.http",
											"Unit",
										),
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"common.http",
											"Unit",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{"path": "/logout", "security": "public"},
						),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "Clear the `refreshToken` cookie.\n"},
					),
					adlast.MakeAll_Field(
						"new_message",
						"new_message",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.http",
									"HttpPost",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.types",
											"NewMessageReq",
										),
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.db",
											"MessageId",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{"path": "/messages/new", "security": "token"},
						),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "Post a message to the noticeboard\n"},
					),
					adlast.MakeAll_Field(
						"recent_messages",
						"recent_messages",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.http",
									"HttpPost",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.types",
											"RecentMessagesReq",
										),
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.types",
											"Paginated",
										),
									),
									[]adlast.TypeExpr{
										adlast.MakeAll_TypeExpr(
											adlast.Make_TypeRef_reference(
												adlast.MakeAll_ScopedName(
													"protoapp.apis.types",
													"Message",
												),
											),
											[]adlast.TypeExpr{},
										),
									},
								),
							},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{"path": "/messages/recent", "security": "token"},
						),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "Get recent noticeboard messages\n"},
					),
					adlast.MakeAll_Field(
						"who_am_i",
						"who_am_i",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.http",
									"HttpGet",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.types",
											"UserWithId",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{"path": "/whoami", "security": "token"},
						),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "Gets info about the logged in user\n"},
					),
					adlast.MakeAll_Field(
						"create_user",
						"create_user",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.http",
									"HttpPost",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.types",
											"UserDetails",
										),
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.db",
											"AppUserId",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{"path": "/users/create", "security": map[string]interface{}{"tokenWithRole": "admin"}},
						),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "Create a new user\n"},
					),
					adlast.MakeAll_Field(
						"update_user",
						"update_user",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.http",
									"HttpPost",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.types",
											"WithId",
										),
									),
									[]adlast.TypeExpr{
										adlast.MakeAll_TypeExpr(
											adlast.Make_TypeRef_reference(
												adlast.MakeAll_ScopedName(
													"protoapp.db",
													"AppUserId",
												),
											),
											[]adlast.TypeExpr{},
										),
										adlast.MakeAll_TypeExpr(
											adlast.Make_TypeRef_reference(
												adlast.MakeAll_ScopedName(
													"protoapp.apis.types",
													"UserDetails",
												),
											),
											[]adlast.TypeExpr{},
										),
									},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"common.http",
											"Unit",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{"path": "/users/update", "security": map[string]interface{}{"tokenWithRole": "admin"}},
						),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "Update a user\n"},
					),
					adlast.MakeAll_Field(
						"query_users",
						"query_users",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.http",
									"HttpPost",
								),
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.types",
											"QueryUsersReq",
										),
									),
									[]adlast.TypeExpr{},
								),
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"protoapp.apis.types",
											"Paginated",
										),
									),
									[]adlast.TypeExpr{
										adlast.MakeAll_TypeExpr(
											adlast.Make_TypeRef_reference(
												adlast.MakeAll_ScopedName(
													"protoapp.apis.types",
													"UserWithId",
												),
											),
											[]adlast.TypeExpr{},
										),
									},
								),
							},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{"path": "/users/query", "security": map[string]interface{}{"tokenWithRole": "admin"}},
						),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "Query users\n"},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("protoapp.apis.ui", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("protoapp.apis.ui", "ApiRequests"),
		AST_ApiRequests(),
	)
}
