// Code generated by goadlc v3 - DO NOT EDIT.
package ui

import (
	"fmt"
	"github.com/adl-lang/goadl_common/common/http"
	strings2 "github.com/adl-lang/goadl_common/common/strings"
	"github.com/adl-lang/goadl_protoapp/protoapp/db"
	"github.com/adl-lang/goadl_rt/v3/sys/adlast"
	"time"
)

type ApiRequests struct {
	_ApiRequests
}

type _ApiRequests struct {
	Healthy        http.HttpGet[http.Unit]                              `json:"healthy"`
	Ping           http.HttpPost[http.Unit, http.Unit]                  `json:"ping"`
	Login          http.HttpPost[LoginReq, LoginResp]                   `json:"login"`
	Refresh        http.HttpPost[RefreshReq, RefreshResp]               `json:"refresh"`
	Logout         http.HttpPost[http.Unit, http.Unit]                  `json:"logout"`
	NewMessage     http.HttpPost[NewMessageReq, db.MessageId]           `json:"newMessage"`
	RecentMessages http.HttpPost[RecentMessagesReq, Paginated[Message]] `json:"recentMessages"`
	WhoAmI         http.HttpGet[UserProfile]                            `json:"whoAmI"`
}

func MakeAll_ApiRequests(
	healthy http.HttpGet[http.Unit],
	ping http.HttpPost[http.Unit, http.Unit],
	login http.HttpPost[LoginReq, LoginResp],
	refresh http.HttpPost[RefreshReq, RefreshResp],
	logout http.HttpPost[http.Unit, http.Unit],
	newmessage http.HttpPost[NewMessageReq, db.MessageId],
	recentmessages http.HttpPost[RecentMessagesReq, Paginated[Message]],
	whoami http.HttpGet[UserProfile],
) ApiRequests {
	return ApiRequests{
		_ApiRequests{
			Healthy:        healthy,
			Ping:           ping,
			Login:          login,
			Refresh:        refresh,
			Logout:         logout,
			NewMessage:     newmessage,
			RecentMessages: recentmessages,
			WhoAmI:         whoami,
		},
	}
}

func Make_ApiRequests() ApiRequests {
	ret := ApiRequests{
		_ApiRequests{
			Healthy:        ((*ApiRequests)(nil)).Default_healthy(),
			Ping:           ((*ApiRequests)(nil)).Default_ping(),
			Login:          ((*ApiRequests)(nil)).Default_login(),
			Refresh:        ((*ApiRequests)(nil)).Default_refresh(),
			Logout:         ((*ApiRequests)(nil)).Default_logout(),
			NewMessage:     ((*ApiRequests)(nil)).Default_newMessage(),
			RecentMessages: ((*ApiRequests)(nil)).Default_recentMessages(),
			WhoAmI:         ((*ApiRequests)(nil)).Default_whoAmI(),
		},
	}
	return ret
}

func (*ApiRequests) Default_healthy() http.HttpGet[http.Unit] {
	return http.MakeAll_HttpGet[http.Unit](
		"/",
		http.Make_HttpSecurity_public(),
		nil,
		adlast.Make_ATypeExpr[http.Unit](adlast.MakeAll_TypeExpr(
			adlast.Make_TypeRef_reference(
				adlast.MakeAll_ScopedName(
					"common.http",
					"Unit",
				),
			),
			[]adlast.TypeExpr{},
		)),
	)
}
func (*ApiRequests) Default_ping() http.HttpPost[http.Unit, http.Unit] {
	return http.MakeAll_HttpPost[http.Unit, http.Unit](
		"/ping",
		http.Make_HttpSecurity_public(),
		nil,
		adlast.Make_ATypeExpr[http.Unit](adlast.MakeAll_TypeExpr(
			adlast.Make_TypeRef_reference(
				adlast.MakeAll_ScopedName(
					"common.http",
					"Unit",
				),
			),
			[]adlast.TypeExpr{},
		)),
		adlast.Make_ATypeExpr[http.Unit](adlast.MakeAll_TypeExpr(
			adlast.Make_TypeRef_reference(
				adlast.MakeAll_ScopedName(
					"common.http",
					"Unit",
				),
			),
			[]adlast.TypeExpr{},
		)),
	)
}
func (*ApiRequests) Default_login() http.HttpPost[LoginReq, LoginResp] {
	return http.MakeAll_HttpPost[LoginReq, LoginResp](
		"/login",
		http.Make_HttpSecurity_public(),
		nil,
		adlast.Make_ATypeExpr[LoginReq](adlast.MakeAll_TypeExpr(
			adlast.Make_TypeRef_reference(
				adlast.MakeAll_ScopedName(
					"protoapp.apis.ui",
					"LoginReq",
				),
			),
			[]adlast.TypeExpr{},
		)),
		adlast.Make_ATypeExpr[LoginResp](adlast.MakeAll_TypeExpr(
			adlast.Make_TypeRef_reference(
				adlast.MakeAll_ScopedName(
					"protoapp.apis.ui",
					"LoginResp",
				),
			),
			[]adlast.TypeExpr{},
		)),
	)
}
func (*ApiRequests) Default_refresh() http.HttpPost[RefreshReq, RefreshResp] {
	return http.MakeAll_HttpPost[RefreshReq, RefreshResp](
		"/refresh",
		http.Make_HttpSecurity_public(),
		nil,
		adlast.Make_ATypeExpr[RefreshReq](adlast.MakeAll_TypeExpr(
			adlast.Make_TypeRef_reference(
				adlast.MakeAll_ScopedName(
					"protoapp.apis.ui",
					"RefreshReq",
				),
			),
			[]adlast.TypeExpr{},
		)),
		adlast.Make_ATypeExpr[RefreshResp](adlast.MakeAll_TypeExpr(
			adlast.Make_TypeRef_reference(
				adlast.MakeAll_ScopedName(
					"protoapp.apis.ui",
					"RefreshResp",
				),
			),
			[]adlast.TypeExpr{},
		)),
	)
}
func (*ApiRequests) Default_logout() http.HttpPost[http.Unit, http.Unit] {
	return http.MakeAll_HttpPost[http.Unit, http.Unit](
		"/logout",
		http.Make_HttpSecurity_public(),
		nil,
		adlast.Make_ATypeExpr[http.Unit](adlast.MakeAll_TypeExpr(
			adlast.Make_TypeRef_reference(
				adlast.MakeAll_ScopedName(
					"common.http",
					"Unit",
				),
			),
			[]adlast.TypeExpr{},
		)),
		adlast.Make_ATypeExpr[http.Unit](adlast.MakeAll_TypeExpr(
			adlast.Make_TypeRef_reference(
				adlast.MakeAll_ScopedName(
					"common.http",
					"Unit",
				),
			),
			[]adlast.TypeExpr{},
		)),
	)
}
func (*ApiRequests) Default_newMessage() http.HttpPost[NewMessageReq, db.MessageId] {
	return http.MakeAll_HttpPost[NewMessageReq, db.MessageId](
		"/messages/new",
		http.Make_HttpSecurity_token(),
		nil,
		adlast.Make_ATypeExpr[NewMessageReq](adlast.MakeAll_TypeExpr(
			adlast.Make_TypeRef_reference(
				adlast.MakeAll_ScopedName(
					"protoapp.apis.ui",
					"NewMessageReq",
				),
			),
			[]adlast.TypeExpr{},
		)),
		adlast.Make_ATypeExpr[db.MessageId](adlast.MakeAll_TypeExpr(
			adlast.Make_TypeRef_reference(
				adlast.MakeAll_ScopedName(
					"protoapp.db",
					"MessageId",
				),
			),
			[]adlast.TypeExpr{},
		)),
	)
}
func (*ApiRequests) Default_recentMessages() http.HttpPost[RecentMessagesReq, Paginated[Message]] {
	return http.MakeAll_HttpPost[RecentMessagesReq, Paginated[Message]](
		"/messages/recent",
		http.Make_HttpSecurity_token(),
		nil,
		adlast.Make_ATypeExpr[RecentMessagesReq](adlast.MakeAll_TypeExpr(
			adlast.Make_TypeRef_reference(
				adlast.MakeAll_ScopedName(
					"protoapp.apis.ui",
					"RecentMessagesReq",
				),
			),
			[]adlast.TypeExpr{},
		)),
		adlast.Make_ATypeExpr[Paginated[Message]](adlast.MakeAll_TypeExpr(
			adlast.Make_TypeRef_reference(
				adlast.MakeAll_ScopedName(
					"protoapp.apis.ui",
					"Paginated",
				),
			),
			[]adlast.TypeExpr{
				adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_reference(
						adlast.MakeAll_ScopedName(
							"protoapp.apis.ui",
							"Message",
						),
					),
					[]adlast.TypeExpr{},
				),
			},
		)),
	)
}
func (*ApiRequests) Default_whoAmI() http.HttpGet[UserProfile] {
	return http.MakeAll_HttpGet[UserProfile](
		"/whoami",
		http.Make_HttpSecurity_token(),
		nil,
		adlast.Make_ATypeExpr[UserProfile](adlast.MakeAll_TypeExpr(
			adlast.Make_TypeRef_reference(
				adlast.MakeAll_ScopedName(
					"protoapp.apis.ui",
					"UserProfile",
				),
			),
			[]adlast.TypeExpr{},
		)),
	)
}

type LoginReq struct {
	_LoginReq
}

type _LoginReq struct {
	Email    strings2.StringNE `json:"email"`
	Password strings2.Password `json:"password"`
}

func MakeAll_LoginReq(
	email strings2.StringNE,
	password strings2.Password,
) LoginReq {
	return LoginReq{
		_LoginReq{
			Email:    email,
			Password: password,
		},
	}
}

func Make_LoginReq(
	email strings2.StringNE,
	password strings2.Password,
) LoginReq {
	ret := LoginReq{
		_LoginReq{
			Email:    email,
			Password: password,
		},
	}
	return ret
}

type LoginResp struct {
	Branch LoginRespBranch
}

type LoginRespBranch interface {
	isLoginRespBranch()
}

func (*LoginResp) MakeNewBranch(key string) (any, error) {
	switch key {
	case "tokens":
		return &_LoginResp_Tokens{}, nil
	case "invalid_credentials":
		return &_LoginResp_Invalid_credentials{}, nil
	}
	return nil, fmt.Errorf("unknown branch is : %s", key)
}

type _LoginResp_Tokens struct {
	V LoginTokens `branch:"tokens"`
}
type _LoginResp_Invalid_credentials struct {
	V struct{} `branch:"invalid_credentials"`
}

func (_LoginResp_Tokens) isLoginRespBranch()              {}
func (_LoginResp_Invalid_credentials) isLoginRespBranch() {}

func Make_LoginResp_tokens(v LoginTokens) LoginResp {
	return LoginResp{
		_LoginResp_Tokens{v},
	}
}

func Make_LoginResp_invalid_credentials() LoginResp {
	return LoginResp{
		_LoginResp_Invalid_credentials{struct{}{}},
	}
}

func (un LoginResp) Cast_tokens() (LoginTokens, bool) {
	br, ok := un.Branch.(_LoginResp_Tokens)
	return br.V, ok
}

func (un LoginResp) Cast_invalid_credentials() (struct{}, bool) {
	br, ok := un.Branch.(_LoginResp_Invalid_credentials)
	return br.V, ok
}

func Handle_LoginResp[T any](
	_in LoginResp,
	tokens func(tokens LoginTokens) T,
	invalid_credentials func(invalid_credentials struct{}) T,
	_default func() T,
) T {
	switch _b := _in.Branch.(type) {
	case _LoginResp_Tokens:
		if tokens != nil {
			return tokens(_b.V)
		}
	case _LoginResp_Invalid_credentials:
		if invalid_credentials != nil {
			return invalid_credentials(_b.V)
		}
	}
	if _default != nil {
		return _default()
	}
	panic("unhandled branch in : LoginResp")
}

func HandleWithErr_LoginResp[T any](
	_in LoginResp,
	tokens func(tokens LoginTokens) (T, error),
	invalid_credentials func(invalid_credentials struct{}) (T, error),
	_default func() (T, error),
) (T, error) {
	switch _b := _in.Branch.(type) {
	case _LoginResp_Tokens:
		if tokens != nil {
			return tokens(_b.V)
		}
	case _LoginResp_Invalid_credentials:
		if invalid_credentials != nil {
			return invalid_credentials(_b.V)
		}
	}
	if _default != nil {
		return _default()
	}
	panic("unhandled branch in : LoginResp")
}

type LoginTokens struct {
	_LoginTokens
}

type _LoginTokens struct {
	Access_jwt  strings2.StringNE `json:"access_jwt"`
	Refresh_jwt strings2.StringNE `json:"refresh_jwt"`
}

func MakeAll_LoginTokens(
	access_jwt strings2.StringNE,
	refresh_jwt strings2.StringNE,
) LoginTokens {
	return LoginTokens{
		_LoginTokens{
			Access_jwt:  access_jwt,
			Refresh_jwt: refresh_jwt,
		},
	}
}

func Make_LoginTokens(
	access_jwt strings2.StringNE,
	refresh_jwt strings2.StringNE,
) LoginTokens {
	ret := LoginTokens{
		_LoginTokens{
			Access_jwt:  access_jwt,
			Refresh_jwt: refresh_jwt,
		},
	}
	return ret
}

type Message struct {
	_Message
}

type _Message struct {
	Id            db.MessageId      `json:"id"`
	Posted_at     time.Time         `json:"posted_at"`
	User_fullname string            `json:"user_fullname"`
	Message       strings2.StringML `json:"message"`
}

func MakeAll_Message(
	id db.MessageId,
	posted_at time.Time,
	user_fullname string,
	message strings2.StringML,
) Message {
	return Message{
		_Message{
			Id:            id,
			Posted_at:     posted_at,
			User_fullname: user_fullname,
			Message:       message,
		},
	}
}

func Make_Message(
	id db.MessageId,
	posted_at time.Time,
	user_fullname string,
	message strings2.StringML,
) Message {
	ret := Message{
		_Message{
			Id:            id,
			Posted_at:     posted_at,
			User_fullname: user_fullname,
			Message:       message,
		},
	}
	return ret
}

type NewMessageReq struct {
	_NewMessageReq
}

type _NewMessageReq struct {
	Message strings2.StringML `json:"message"`
}

func MakeAll_NewMessageReq(
	message strings2.StringML,
) NewMessageReq {
	return NewMessageReq{
		_NewMessageReq{
			Message: message,
		},
	}
}

func Make_NewMessageReq(
	message strings2.StringML,
) NewMessageReq {
	ret := NewMessageReq{
		_NewMessageReq{
			Message: message,
		},
	}
	return ret
}

type Paginated[T any] struct {
	_Paginated[T]
}

type _Paginated[T any] struct {
	Items          []T    `json:"items"`
	Current_offset uint32 `json:"current_offset"`
	Total_count    uint32 `json:"total_count"`
}

func MakeAll_Paginated[T any](
	items []T,
	current_offset uint32,
	total_count uint32,
) Paginated[T] {
	return Paginated[T]{
		_Paginated[T]{
			Items:          items,
			Current_offset: current_offset,
			Total_count:    total_count,
		},
	}
}

func Make_Paginated[T any](
	items []T,
	current_offset uint32,
	total_count uint32,
) Paginated[T] {
	ret := Paginated[T]{
		_Paginated[T]{
			Items:          items,
			Current_offset: current_offset,
			Total_count:    total_count,
		},
	}
	return ret
}

type RecentMessagesReq struct {
	_RecentMessagesReq
}

type _RecentMessagesReq struct {
	Offset uint32 `json:"offset"`
	Limit  uint32 `json:"limit"`
}

func MakeAll_RecentMessagesReq(
	offset uint32,
	limit uint32,
) RecentMessagesReq {
	return RecentMessagesReq{
		_RecentMessagesReq{
			Offset: offset,
			Limit:  limit,
		},
	}
}

func Make_RecentMessagesReq() RecentMessagesReq {
	ret := RecentMessagesReq{
		_RecentMessagesReq{
			Offset: ((*RecentMessagesReq)(nil)).Default_offset(),
			Limit:  ((*RecentMessagesReq)(nil)).Default_limit(),
		},
	}
	return ret
}

func (*RecentMessagesReq) Default_offset() uint32 {
	return 0
}
func (*RecentMessagesReq) Default_limit() uint32 {
	return 20
}

type RefreshReq struct {
	_RefreshReq
}

type _RefreshReq struct {
	Refresh_token *strings2.StringNE `json:"refresh_token"`
}

func MakeAll_RefreshReq(
	refresh_token *strings2.StringNE,
) RefreshReq {
	return RefreshReq{
		_RefreshReq{
			Refresh_token: refresh_token,
		},
	}
}

func Make_RefreshReq() RefreshReq {
	ret := RefreshReq{
		_RefreshReq{
			Refresh_token: ((*RefreshReq)(nil)).Default_refresh_token(),
		},
	}
	return ret
}

func (*RefreshReq) Default_refresh_token() *strings2.StringNE {
	return nil
}

type RefreshResp struct {
	Branch RefreshRespBranch
}

type RefreshRespBranch interface {
	isRefreshRespBranch()
}

func (*RefreshResp) MakeNewBranch(key string) (any, error) {
	switch key {
	case "access_token":
		return &_RefreshResp_Access_token{}, nil
	case "invalid_refresh_token":
		return &_RefreshResp_Invalid_refresh_token{}, nil
	}
	return nil, fmt.Errorf("unknown branch is : %s", key)
}

type _RefreshResp_Access_token struct {
	V strings2.StringNE `branch:"access_token"`
}
type _RefreshResp_Invalid_refresh_token struct {
	V struct{} `branch:"invalid_refresh_token"`
}

func (_RefreshResp_Access_token) isRefreshRespBranch()          {}
func (_RefreshResp_Invalid_refresh_token) isRefreshRespBranch() {}

func Make_RefreshResp_access_token(v strings2.StringNE) RefreshResp {
	return RefreshResp{
		_RefreshResp_Access_token{v},
	}
}

func Make_RefreshResp_invalid_refresh_token() RefreshResp {
	return RefreshResp{
		_RefreshResp_Invalid_refresh_token{struct{}{}},
	}
}

func (un RefreshResp) Cast_access_token() (strings2.StringNE, bool) {
	br, ok := un.Branch.(_RefreshResp_Access_token)
	return br.V, ok
}

func (un RefreshResp) Cast_invalid_refresh_token() (struct{}, bool) {
	br, ok := un.Branch.(_RefreshResp_Invalid_refresh_token)
	return br.V, ok
}

func Handle_RefreshResp[T any](
	_in RefreshResp,
	access_token func(access_token strings2.StringNE) T,
	invalid_refresh_token func(invalid_refresh_token struct{}) T,
	_default func() T,
) T {
	switch _b := _in.Branch.(type) {
	case _RefreshResp_Access_token:
		if access_token != nil {
			return access_token(_b.V)
		}
	case _RefreshResp_Invalid_refresh_token:
		if invalid_refresh_token != nil {
			return invalid_refresh_token(_b.V)
		}
	}
	if _default != nil {
		return _default()
	}
	panic("unhandled branch in : RefreshResp")
}

func HandleWithErr_RefreshResp[T any](
	_in RefreshResp,
	access_token func(access_token strings2.StringNE) (T, error),
	invalid_refresh_token func(invalid_refresh_token struct{}) (T, error),
	_default func() (T, error),
) (T, error) {
	switch _b := _in.Branch.(type) {
	case _RefreshResp_Access_token:
		if access_token != nil {
			return access_token(_b.V)
		}
	case _RefreshResp_Invalid_refresh_token:
		if invalid_refresh_token != nil {
			return invalid_refresh_token(_b.V)
		}
	}
	if _default != nil {
		return _default()
	}
	panic("unhandled branch in : RefreshResp")
}

type UserProfile struct {
	_UserProfile
}

type _UserProfile struct {
	Id       db.AppUserId `json:"id"`
	Fullname string       `json:"fullname"`
	Email    string       `json:"email"`
	Is_admin bool         `json:"is_admin"`
}

func MakeAll_UserProfile(
	id db.AppUserId,
	fullname string,
	email string,
	is_admin bool,
) UserProfile {
	return UserProfile{
		_UserProfile{
			Id:       id,
			Fullname: fullname,
			Email:    email,
			Is_admin: is_admin,
		},
	}
}

func Make_UserProfile(
	id db.AppUserId,
	fullname string,
	email string,
	is_admin bool,
) UserProfile {
	ret := UserProfile{
		_UserProfile{
			Id:       id,
			Fullname: fullname,
			Email:    email,
			Is_admin: is_admin,
		},
	}
	return ret
}
