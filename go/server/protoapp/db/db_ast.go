// Code generated by goadlc v3 - DO NOT EDIT.
package db

import (
	goadl "github.com/adl-lang/goadl_rt/v3"
	"github.com/adl-lang/goadl_rt/v3/customtypes"
	"github.com/adl-lang/goadl_rt/v3/sys/adlast"
	"github.com/adl-lang/goadl_rt/v3/sys/types"
)

func Texpr_AppUser() adlast.ATypeExpr[AppUser] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("protoapp.db", "AppUser"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[AppUser](te)
}

func AST_AppUser() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"AppUser",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"fullname",
						"fullname",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.strings",
									"StringNE",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"email",
						"email",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.strings",
									"StringNE",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"isAdmin",
						"isAdmin",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Bool",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"hashed_password",
						"hashed_password",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.strings",
									"StringNE",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_just[any](
							"",
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("protoapp.db", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("protoapp.db", "AppUser"),
		AST_AppUser(),
	)
}

func Texpr_AppUserId() adlast.ATypeExpr[AppUserId] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("protoapp.db", "AppUserId"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[AppUserId](te)
}

func AST_AppUserId() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"AppUserId",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_type_(
			adlast.MakeAll_TypeDef(
				[]adlast.Ident{},
				adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_reference(
						adlast.MakeAll_ScopedName(
							"common.db",
							"DbKey",
						),
					),
					[]adlast.TypeExpr{
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"protoapp.db",
									"AppUserTable",
								),
							),
							[]adlast.TypeExpr{},
						),
					},
				),
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("protoapp.db", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("protoapp.db", "AppUserId"),
		AST_AppUserId(),
	)
}

func Texpr_AppUserTable() adlast.ATypeExpr[AppUserTable] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("protoapp.db", "AppUserTable"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[AppUserTable](te)
}

func AST_AppUserTable() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"AppUserTable",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_newtype_(
			adlast.MakeAll_NewType(
				[]adlast.Ident{},
				adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_reference(
						adlast.MakeAll_ScopedName(
							"common.db",
							"WithId",
						),
					),
					[]adlast.TypeExpr{
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"protoapp.db",
									"AppUser",
								),
							),
							[]adlast.TypeExpr{},
						),
					},
				),
				types.Make_Maybe_nothing[any](),
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("common.db", "DbTable"): map[string]interface{}{"extra_sql": []interface{}{"grant select on app_user to admin_user;"}, "indexes": []interface{}{[]interface{}{"email"}}, "uniqueness_constraints": []interface{}{[]interface{}{"email"}}}},
	)
	return adlast.Make_ScopedDecl("protoapp.db", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("protoapp.db", "AppUserTable"),
		AST_AppUserTable(),
	)
}

func Texpr_Message() adlast.ATypeExpr[Message] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("protoapp.db", "Message"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[Message](te)
}

func AST_Message() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"Message",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"posted_at",
						"posted_at",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.time",
									"Instant",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"posted_by",
						"posted_by",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"protoapp.db",
									"AppUserId",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"message",
						"message",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.strings",
									"StringML",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("protoapp.db", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("protoapp.db", "Message"),
		AST_Message(),
	)
}

func Texpr_MessageId() adlast.ATypeExpr[MessageId] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("protoapp.db", "MessageId"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[MessageId](te)
}

func AST_MessageId() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"MessageId",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_type_(
			adlast.MakeAll_TypeDef(
				[]adlast.Ident{},
				adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_reference(
						adlast.MakeAll_ScopedName(
							"common.db",
							"DbKey",
						),
					),
					[]adlast.TypeExpr{
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"protoapp.db",
									"MessageTable",
								),
							),
							[]adlast.TypeExpr{},
						),
					},
				),
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("protoapp.db", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("protoapp.db", "MessageId"),
		AST_MessageId(),
	)
}

func Texpr_MessageTable() adlast.ATypeExpr[MessageTable] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("protoapp.db", "MessageTable"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[MessageTable](te)
}

func AST_MessageTable() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"MessageTable",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_newtype_(
			adlast.MakeAll_NewType(
				[]adlast.Ident{},
				adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_reference(
						adlast.MakeAll_ScopedName(
							"common.db",
							"WithId",
						),
					),
					[]adlast.TypeExpr{
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"protoapp.db",
									"Message",
								),
							),
							[]adlast.TypeExpr{},
						),
					},
				),
				types.Make_Maybe_nothing[any](),
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("common.db", "DbTable"): map[string]interface{}{"extra_sql": []interface{}{"grant all on message to admin_user;"}, "indexes": []interface{}{[]interface{}{"posted_at"}}}},
	)
	return adlast.Make_ScopedDecl("protoapp.db", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("protoapp.db", "MessageTable"),
		AST_MessageTable(),
	)
}
