// Code generated by goadlc v3 - DO NOT EDIT.
package server

import (
	"github.com/adl-lang/goadl_common/common/hashing"
)

type AccessClaims struct {
	_AccessClaims
}

type _AccessClaims struct {
	Iss  string `json:"iss"`
	Sub  string `json:"sub"`
	Exp  int64  `json:"exp"`
	Role string `json:"role"`
}

func MakeAll_AccessClaims(
	iss string,
	sub string,
	exp int64,
	role string,
) AccessClaims {
	return AccessClaims{
		_AccessClaims{
			Iss:  iss,
			Sub:  sub,
			Exp:  exp,
			Role: role,
		},
	}
}

func Make_AccessClaims(
	iss string,
	sub string,
	exp int64,
	role string,
) AccessClaims {
	ret := AccessClaims{
		_AccessClaims{
			Iss:  iss,
			Sub:  sub,
			Exp:  exp,
			Role: role,
		},
	}
	return ret
}

type DbConnectionConfig struct {
	_DbConnectionConfig
}

type _DbConnectionConfig struct {
	Host     string `json:"host"`
	Dbname   string `json:"dbname"`
	Port     uint32 `json:"port"`
	User     string `json:"user"`
	Password string `json:"password"`
}

func MakeAll_DbConnectionConfig(
	host string,
	dbname string,
	port uint32,
	user string,
	password string,
) DbConnectionConfig {
	return DbConnectionConfig{
		_DbConnectionConfig{
			Host:     host,
			Dbname:   dbname,
			Port:     port,
			User:     user,
			Password: password,
		},
	}
}

func Make_DbConnectionConfig(
	host string,
	dbname string,
	user string,
	password string,
) DbConnectionConfig {
	ret := DbConnectionConfig{
		_DbConnectionConfig{
			Host:     host,
			Dbname:   dbname,
			Port:     ((*DbConnectionConfig)(nil)).Default_port(),
			User:     user,
			Password: password,
		},
	}
	return ret
}

func (*DbConnectionConfig) Default_port() uint32 {
	return 5432
}

type RefreshClaims struct {
	_RefreshClaims
}

type _RefreshClaims struct {
	Iss string `json:"iss"`
	Sub string `json:"sub"`
	Exp int64  `json:"exp"`
}

func MakeAll_RefreshClaims(
	iss string,
	sub string,
	exp int64,
) RefreshClaims {
	return RefreshClaims{
		_RefreshClaims{
			Iss: iss,
			Sub: sub,
			Exp: exp,
		},
	}
}

func Make_RefreshClaims(
	iss string,
	sub string,
	exp int64,
) RefreshClaims {
	ret := RefreshClaims{
		_RefreshClaims{
			Iss: iss,
			Sub: sub,
			Exp: exp,
		},
	}
	return ret
}

type ServerConfig struct {
	_ServerConfig
}

type _ServerConfig struct {
	Db                      DbConnectionConfig `json:"db"`
	Db_connection_pool_size uint32             `json:"db_connection_pool_size"`
	Jwt_issuer              string             `json:"jwt_issuer"`
	Jwt_access_secret       string             `json:"jwt_access_secret"`
	Jwt_access_expiry_secs  uint32             `json:"jwt_access_expiry_secs"`
	Jwt_refresh_secret      string             `json:"jwt_refresh_secret"`
	Jwt_refresh_expiry_secs uint32             `json:"jwt_refresh_expiry_secs"`
	Http_bind_addr          string             `json:"http_bind_addr"`
	Password_hashing_algo   hashing.Algorithm  `json:"password_hashing_algo"`
}

func MakeAll_ServerConfig(
	db DbConnectionConfig,
	db_connection_pool_size uint32,
	jwt_issuer string,
	jwt_access_secret string,
	jwt_access_expiry_secs uint32,
	jwt_refresh_secret string,
	jwt_refresh_expiry_secs uint32,
	http_bind_addr string,
	password_hashing_algo hashing.Algorithm,
) ServerConfig {
	return ServerConfig{
		_ServerConfig{
			Db:                      db,
			Db_connection_pool_size: db_connection_pool_size,
			Jwt_issuer:              jwt_issuer,
			Jwt_access_secret:       jwt_access_secret,
			Jwt_access_expiry_secs:  jwt_access_expiry_secs,
			Jwt_refresh_secret:      jwt_refresh_secret,
			Jwt_refresh_expiry_secs: jwt_refresh_expiry_secs,
			Http_bind_addr:          http_bind_addr,
			Password_hashing_algo:   password_hashing_algo,
		},
	}
}

func Make_ServerConfig(
	db DbConnectionConfig,
	jwt_access_secret string,
	jwt_refresh_secret string,
) ServerConfig {
	ret := ServerConfig{
		_ServerConfig{
			Db:                      db,
			Db_connection_pool_size: ((*ServerConfig)(nil)).Default_db_connection_pool_size(),
			Jwt_issuer:              ((*ServerConfig)(nil)).Default_jwt_issuer(),
			Jwt_access_secret:       jwt_access_secret,
			Jwt_access_expiry_secs:  ((*ServerConfig)(nil)).Default_jwt_access_expiry_secs(),
			Jwt_refresh_secret:      jwt_refresh_secret,
			Jwt_refresh_expiry_secs: ((*ServerConfig)(nil)).Default_jwt_refresh_expiry_secs(),
			Http_bind_addr:          ((*ServerConfig)(nil)).Default_http_bind_addr(),
			Password_hashing_algo:   ((*ServerConfig)(nil)).Default_password_hashing_algo(),
		},
	}
	return ret
}

func (*ServerConfig) Default_db_connection_pool_size() uint32 {
	return 20
}
func (*ServerConfig) Default_jwt_issuer() string {
	return "adl-protoapp.link"
}
func (*ServerConfig) Default_jwt_access_expiry_secs() uint32 {
	return 300
}
func (*ServerConfig) Default_jwt_refresh_expiry_secs() uint32 {
	return 86400
}
func (*ServerConfig) Default_http_bind_addr() string {
	return "0.0.0.0:8080"
}
func (*ServerConfig) Default_password_hashing_algo() hashing.Algorithm {
	return hashing.Make_Algorithm_argon2id(
		hashing.MakeAll_Argon2idParams(
			65536,
			3,
			2,
			16,
			32,
		),
	)
}
