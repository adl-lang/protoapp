// Code generated by goadlc v3 - DO NOT EDIT.
package server

import (
	goadl "github.com/adl-lang/goadl_rt/v3"
	"github.com/adl-lang/goadl_rt/v3/customtypes"
	"github.com/adl-lang/goadl_rt/v3/sys/adlast"
	"github.com/adl-lang/goadl_rt/v3/sys/types"
)

func Texpr_AccessClaims() adlast.ATypeExpr[AccessClaims] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("protoapp.config.server", "AccessClaims"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[AccessClaims](te)
}

func AST_AccessClaims() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"AccessClaims",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"iss",
						"iss",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"sub",
						"sub",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"exp",
						"exp",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Int64",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"role",
						"role",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("protoapp.config.server", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("protoapp.config.server", "AccessClaims"),
		AST_AccessClaims(),
	)
}

func Texpr_DbConnectionConfig() adlast.ATypeExpr[DbConnectionConfig] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("protoapp.config.server", "DbConnectionConfig"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[DbConnectionConfig](te)
}

func AST_DbConnectionConfig() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"DbConnectionConfig",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"host",
						"host",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"dbname",
						"dbname",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"port",
						"port",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Word32",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_just[any](
							5432,
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"user",
						"user",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"password",
						"password",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("protoapp.config.server", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("protoapp.config.server", "DbConnectionConfig"),
		AST_DbConnectionConfig(),
	)
}

func Texpr_RefreshClaims() adlast.ATypeExpr[RefreshClaims] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("protoapp.config.server", "RefreshClaims"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[RefreshClaims](te)
}

func AST_RefreshClaims() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"RefreshClaims",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"iss",
						"iss",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"sub",
						"sub",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"exp",
						"exp",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Int64",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("protoapp.config.server", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("protoapp.config.server", "RefreshClaims"),
		AST_RefreshClaims(),
	)
}

func Texpr_ServerConfig() adlast.ATypeExpr[ServerConfig] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("protoapp.config.server", "ServerConfig"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[ServerConfig](te)
}

func AST_ServerConfig() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"ServerConfig",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"db",
						"db",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"protoapp.config.server",
									"DbConnectionConfig",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"db_connection_pool_size",
						"db_connection_pool_size",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Word32",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_just[any](
							20,
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"jwt_issuer",
						"jwt_issuer",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_just[any](
							"adl-protoapp.link",
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"jwt_access_secret",
						"jwt_access_secret",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"jwt_access_expiry_secs",
						"jwt_access_expiry_secs",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Word32",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_just[any](
							300,
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"jwt_refresh_secret",
						"jwt_refresh_secret",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"jwt_refresh_expiry_secs",
						"jwt_refresh_expiry_secs",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Word32",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_just[any](
							86400,
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"http_bind_addr",
						"http_bind_addr",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_just[any](
							"0.0.0.0:8080",
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"password_hashing_algo",
						"password_hashing_algo",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"common.hashing",
									"Algorithm",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_just[any](
							map[string]interface{}{"argon2id": map[string]interface{}{}},
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("protoapp.config.server", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("protoapp.config.server", "ServerConfig"),
		AST_ServerConfig(),
	)
}
